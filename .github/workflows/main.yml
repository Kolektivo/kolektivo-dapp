name: main
on:
  push:
    branches:
      - main
      - staging
      - development
  pull_request:
jobs:
  install:
    timeout-minutes: 15
    name: üîç Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright binaries
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      - name: Install Playwright Browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - run: npm list

      - run: npm run lint

  # deploy:
  #   name: Deploy to Vercel
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   outputs:
  #     DEPLOYMENT_URL: ${{ steps.vercel-deploy.outputs.PREVIEW_URL }}
  #     INSPECT_URL: ${{ steps.vercel-deploy.outputs.INSPECT_URL }}
  #     DEPLOYMENT_ENVIRONMENT: ${{ steps.get-deployment-environment.outputs.DEPLOYMENT_ENVIRONMENT }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
  #         cache: 'npm'

  #     - name: Get deployment environment
  #       id: get-deployment-environment
  #       run: |
  #         echo "Running on branch ${{ github.ref }}"
  #         if [ "${{ github.ref }}" = "refs/heads/main" ]; then
  #           echo "::set-output name=DEPLOYMENT_ENVIRONMENT::Production"
  #         else
  #           echo "::set-output name=DEPLOYMENT_ENVIRONMENT::Preview"
  #         fi

  #       # .vercel directory with project.json is necessary for Vercel CLI to work
  #     - name: Create .vercel directory
  #       run: |
  #         mkdir .vercel
  #         cd .vercel
  #         touch project.json
  #         echo '{"projectId":"${{ secrets.VERCEL_PROJECT_ID }}","orgId":"${{ secrets.VERCEL_ORG_ID }}"}' >> project.json

  #     - name: Deploy to Vercel
  #       id: vercel-deploy
  #       run: |
  #         if [[ "${{ steps.get-deployment-environment.outputs.DEPLOYMENT_ENVIRONMENT }}" = "Production" ]]; then
  #           npm run vercel:deploy:production --token=${{ secrets.VERCEL_TOKEN }} |& tee deployment-output.txt
  #         else
  #           npm run vercel:deploy --token=${{ secrets.VERCEL_TOKEN }} |& tee deployment-output.txt
  #         fi

  #         DEPLOYMENT_URL=$(grep -m 1 -o 'https[^"]*.vercel.app' deployment-output.txt)
  #         echo Deployment URL: $DEPLOYMENT_URL
  #         INSPECT_URL=$(grep -m 1 -o 'https://vercel[^"]*[[:blank:]]' deployment-output.txt)
  #         echo Inspect URL: $INSPECT_URL
  #         echo "::set-output name=PREVIEW_URL::$DEPLOYMENT_URL"
  #         echo "::set-output name=INSPECT_URL::$INSPECT_URL"

  e2e:
    name: e2e tests
    needs: install
    # needs: [deploy, lint]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache Playwright
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}


      # - run: npx playwright install

      # - run: npx playwright install-deps

      # - run: npm install -D @playwright/test 

      - name: Run playwright
        run: npm run e2e:ci

  # cypress-run:
  #   name: Cypress run
  #   needs: [deploy, lint]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     # Run e2e tests against Vercel deployment
  #     - name: Cypress run
  #       uses: cypress-io/github-action@v4
  #       with:
  #         config: pageLoadTimeout=100000,baseUrl=${{needs.deploy.outputs.DEPLOYMENT_URL}}
  #     # after the test run completes
  #     # store videos and any screenshots
  #     # NOTE: screenshots will be generated only if E2E test failed
  #     # thus we store screenshots only on failures
  #     - uses: actions/upload-artifact@v2
  #       if: failure()
  #       with:
  #         name: cypress-screenshots
  #         path: test/e2e/screenshots

  # failed-e2e:
  #   name: Comment on PR with failing tests details
  #   needs: [deploy, cypress-run]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   if: always() && needs.cypress-run.result == 'failure' && (github.event_name == 'pull_request')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get workflow run URL
  #       id: workflow-url
  #       run: echo "::set-output name=WORKFLOW_RUN_URL::${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  #     - name: Get current date
  #       id: get-current-date
  #       # Stores current date as variable to use in the next step
  #       run: echo "::set-output name=CURRENT_DATE::$(date -u)"

  #     - name: Comment on the Pull Request
  #       uses: thollander/actions-comment-pull-request@v1
  #       with:
  #         # Content of the comment
  #         message: |
  #           | Type | Status | URL | Date |
  #           | :--- | :----- | :------ | :------ |
  #           | **Latest failed e2e tests** | ‚ùå Failed ([Inspect](${{ steps.workflow-url.outputs.WORKFLOW_RUN_URL }})) | [Visit Preview](${{needs.deploy.outputs.DEPLOYMENT_URL}}) | ${{ steps.get-current-date.outputs.CURRENT_DATE }} |

  #           Download Failing tests screenshots, from the workflow details page: [${{ steps.workflow-url.outputs.WORKFLOW_RUN_URL }}](${{ steps.workflow-url.outputs.WORKFLOW_RUN_URL }})
  #         # This is going to replace the already existing comment based and string matching
  #         comment_includes: 'Latest failed e2e tests'
  #         # Pass Github token so it's possible to comment on a PR
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # # If the e2e tests were successful, assign a branch specific URL to the Vercel deployment
  # # Otherwise the latest successful deployment for that branch will be still available under the branch specific URL
  # assign-branch-url:
  #   name: Assign branch specific URL
  #   needs: [deploy, lint]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   if: ${{needs.deploy.outputs.DEPLOYMENT_ENVIRONMENT == 'Preview' }}
  #   outputs:
  #     BRANCH_DOMAIN: ${{ steps.branch-deployment-url.outputs.BRANCH_DOMAIN }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'

  #     - name: Get branch deployment URL
  #       id: branch-deployment-url
  #       shell: bash
  #       run: |
  #         BRANCH_NAME=${{ github.ref_name }}
  #         BRANCH_SUBDOMAIN=kolektivo-dapp-$BRANCH_NAME

  #         if ${{ github.event_name == 'pull_request' }}
  #         then 
  #           BRANCH_NAME=${{ github.head_ref }}
  #           BRANCH_NAME="${BRANCH_NAME//[^a-zA-Z0-9]/-}"
  #           BRANCH_SUBDOMAIN=kolektivo-dapp-$BRANCH_NAME
  #           BRANCH_SUBDOMAIN=${BRANCH_SUBDOMAIN:0:57};
  #           SUFFIX=$(echo -n "$BRANCH_NAME" | md5sum | head -c 6)
  #           BRANCH_SUBDOMAIN+=$SUFFIX;
  #         fi


  #         echo "::set-output name=BRANCH_DOMAIN::$BRANCH_SUBDOMAIN.vercel.app"

  #     - run: npm run vercel:alias --deployment=${{needs.deploy.outputs.DEPLOYMENT_URL}} --branch=${{ steps.branch-deployment-url.outputs.BRANCH_DOMAIN }} --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_TEAM_SLUG }}

  # comment-pr:
  #   name: Comment on the Pull Request
  #   if: ${{ github.event_name == 'pull_request' }}
  #   needs: [deploy, assign-branch-url]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Get current date
  #       id: get-current-date
  #       # Stores current date as variable to use in the next step
  #       run: |
  #         echo "::set-output name=CURRENT_DATE::$(date -u)"

  #     - name: Comment on the Pull Request
  #       uses: thollander/actions-comment-pull-request@v1
  #       with:
  #         # Content of the comment
  #         message: |
  #           | Type | Status | URL | Date |
  #           | :--- | :----- | :------ | :------ |
  #           | **Latest successful deployment** | ‚úÖ Ready ([Inspect](${{needs.deploy.outputs.INSPECT_URL}})) | [Visit Preview](https://${{needs.assign-branch-url.outputs.BRANCH_DOMAIN}}) | ${{ steps.get-current-date.outputs.CURRENT_DATE }} |
  #         # This is going to replace the already existing comment based and string matching
  #         comment_includes: 'Latest successful deployment'
  #         # Pass Github token so it's possible to comment on a PR
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
