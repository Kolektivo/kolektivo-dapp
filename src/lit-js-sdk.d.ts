/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable prettier/prettier */
/** Declaration file generated by dts-gen */

export class LitNodeClient {
    constructor(t?: any);
    connect(): Promise<void>;
    getChainDataSigningShare(t: any): any;
    getDecryptionShare(t: any): any;
    getEncryptionKey(t: any): any;
  
    getSignedChainDataToken(t: any): any;
  
    getSignedToken(t: any): any;
  
    getSigningShare(t: any): any;
  
    handleNodePromises(t: any): any;
  
    handshakeWithSgx(t: any): any;
  
    saveEncryptionKey(t: any): any;
  
    saveSigningCondition(t: any): any;
  
    sendCommandToNode(t: any): any;
  
    storeEncryptionConditionWithNode(t: any): any;
    storeSigningConditionWithNode(t: any): any;
    throwNodeError(t: any): void;
  }
  
  export const ALL_LIT_CHAINS: {
    alfajores: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    arbitrum: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    aurora: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    avalanche: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    bsc: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    celo: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    cosmos: {
      blockExplorerUrls: string[];
      chainId: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    cronos: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    eluvio: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    ethereum: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    evmos: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    evmosCosmos: {
      blockExplorerUrls: string[];
      chainId: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    evmosCosmosTestnet: {
      blockExplorerUrls: string[];
      chainId: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    evmosTestnet: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    fantom: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    fuji: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    goerli: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    harmony: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    kovan: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    kyve: {
      blockExplorerUrls: string[];
      chainId: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    mumbai: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    optimism: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    polygon: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    rinkeby: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    ropsten: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    solana: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    solanaDevnet: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    solanaTestnet: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    xdai: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    xdc: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
  };
  
  export const LIT_CHAINS: {
    alfajores: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    arbitrum: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    aurora: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    avalanche: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    bsc: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    celo: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    cronos: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    eluvio: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    ethereum: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    evmos: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    evmosTestnet: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
    fantom: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    fuji: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    goerli: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    harmony: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    kovan: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    mumbai: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    optimism: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    polygon: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    rinkeby: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    ropsten: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    xdai: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: string;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: string;
      vmType: string;
    };
    xdc: {
      blockExplorerUrls: string[];
      chainId: number;
      contractAddress: any;
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      type: any;
      vmType: string;
    };
  };
  
  export const LIT_SVM_CHAINS: {
    solana: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    solanaDevnet: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
    solanaTestnet: {
      blockExplorerUrls: string[];
      decimals: number;
      name: string;
      rpcUrls: string[];
      symbol: string;
      vmType: string;
    };
  };
  
  export const version: string;
  
  export function base64StringToBlob(t: any): any;
  
  export function blobToBase64String(t: any): any;
  
  export function canonicalAccessControlConditionFormatter(t: any): any;
  
  export function canonicalEVMContractConditionFormatter(t: any): any;
  
  export function canonicalUnifiedAccessControlConditionFormatter(t: any): any;
  
  export function checkAndSignAuthMessage(t: any): any;
  
  export function connectWeb3(t: any): any;
  
  export function createHtmlLIT(t: any): any;
  
  export function decimalPlaces(t: any): any;
  
  export function decodeCallResult(t: any): any;
  
  export function decryptFile(t: any): any;
  
  export function decryptString(t: any, r: any): any;
  
  export function decryptWithPrivKey(t: any, e: any): any;
  
  export function decryptWithSymmetricKey(t: any, e: any): any;
  
  export function decryptZip(t: any, e: any): any;
  
  export function decryptZipFileWithMetadata(t: any): any;
  
  export function disconnectWeb3(): any;
  
  export function downloadFile(t: any): void;
  
  export function encodeCallData(t: any): any;
  
  export function encryptFile(t: any): any;
  
  export function encryptFileAndZipWithMetadata(t: any): any;
  
  export function encryptString(t: any): any;
  
  export function encryptWithPubKey(t: any, e: any, r: any): any;
  
  export function encryptWithSymmetricKey(t: any, e: any): any;
  
  export function encryptZip(t: any): any;
  
  export function fileToDataUrl(t: any): any;
  
  export function findLITs(): any;
  
  export function generateSymmetricKey(): any;
  
  export function getTokenList(): any;
  
  export function hashAccessControlConditions(t: any): any;
  
  export function hashEVMContractConditions(t: any): any;
  
  export function hashUnifiedAccessControlConditions(t: any): any;
  
  export function humanizeAccessControlConditions(t: any): any;
  
  export function importSymmetricKey(t: any): any;
  
  export function initWasmBlsSdk(): any;
  
  export function injectViewerIFrame(t: any): void;
  
  export function litJsSdkLoadedInALIT(): any;
  
  export function lookupNameServiceAddress(t: any): any;
  
  export function mintLIT(t: any): any;
  
  export function printError(t: any): void;
  
  export function sendLIT(t: any): any;
  
  export function signAndSaveAuthMessage(t: any): any;
  
  export function signMessageAsync(t: any, e: any, r: any): any;
  
  export function toggleLock(): any;
  
  export function uint8arrayFromString(t: any, r: any): any;
  
  export function uint8arrayToString(t: any, r: any): any;
  
  export function unlockLitWithKey(t: any): any;
  
  export function verifyJwt(t: any): any;
  
  export function zipAndEncryptFiles(t: any): any;
  
  export function zipAndEncryptString(t: any): any;
  
  export namespace wasmBlsSdkHelpers {
    function combine_decryption_shares(t: any, e: any, r: any): any;
  
    function combine_signatures(t: any, e: any): any;
  
    function create_decryption_share(t: any, e: any, r: any, n: any): any;
  
    function decrypt(t: any, e: any): any;
  
    function encrypt(t: any, e: any): any;
  
    function generate_poly(t: any): any;
  
    function get_mc_bytes(t: any): any;
  
    function get_mpk_bytes(): any;
  
    function get_msk_bytes(): any;
  
    function get_pkshare(): any;
  
    function get_skshare(): any;
  
    function set_mc_bytes(t: any): void;
  
    function set_rng_values(): any;
  
    function sign_msg(t: any, e: any): any;
  
    function sk_bytes_to_pk_bytes(t: any): any;
  
    function verify(t: any, e: any, r: any): any;
  }