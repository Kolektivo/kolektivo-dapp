/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BacrolesInterface extends utils.Interface {
  functions: {
    "allowTarget(uint256,address,uint8)": FunctionFragment;
    "avatar()": FunctionFragment;
    "badger()": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8,uint256)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8,uint256)": FunctionFragment;
    "getGuard()": FunctionFragment;
    "guard()": FunctionFragment;
    "multisend()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeTarget(uint256,address)": FunctionFragment;
    "scopeAllowFunction(uint256,address,bytes4,uint8)": FunctionFragment;
    "scopeFunction(uint256,address,bytes4,bool[],uint8[],uint8[],bytes[],uint8)": FunctionFragment;
    "scopeFunctionExecutionOptions(uint256,address,bytes4,uint8)": FunctionFragment;
    "scopeParameter(uint256,address,bytes4,uint256,uint8,uint8,bytes)": FunctionFragment;
    "scopeParameterAsOneOf(uint256,address,bytes4,uint256,uint8,bytes[])": FunctionFragment;
    "scopeRevokeFunction(uint256,address,bytes4)": FunctionFragment;
    "scopeTarget(uint256,address)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setMultisend(address)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unscopeParameter(uint256,address,bytes4,uint8)": FunctionFragment;
    "updateBadger(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowTarget"
      | "avatar"
      | "badger"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getGuard"
      | "guard"
      | "multisend"
      | "owner"
      | "renounceOwnership"
      | "revokeTarget"
      | "scopeAllowFunction"
      | "scopeFunction"
      | "scopeFunctionExecutionOptions"
      | "scopeParameter"
      | "scopeParameterAsOneOf"
      | "scopeRevokeFunction"
      | "scopeTarget"
      | "setAvatar"
      | "setGuard"
      | "setMultisend"
      | "setTarget"
      | "setUp"
      | "target"
      | "transferOwnership"
      | "unscopeParameter"
      | "updateBadger"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowTarget",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(functionFragment: "badger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(functionFragment: "multisend", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTarget",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeAllowFunction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeFunction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeFunctionExecutionOptions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeParameter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeParameterAsOneOf",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeRevokeFunction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scopeTarget",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultisend",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unscopeParameter",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBadger",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "badger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multisend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeAllowFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeFunctionExecutionOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeParameterAsOneOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeRevokeFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scopeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultisend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unscopeParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBadger",
    data: BytesLike
  ): Result;

  events: {
    "AvatarSet(address,address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RolesModSetup(address,address,address,address)": EventFragment;
    "SetMultisendAddress(address)": EventFragment;
    "TargetSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesModSetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMultisendAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}

export interface AvatarSetEventObject {
  previousAvatar: string;
  newAvatar: string;
}
export type AvatarSetEvent = TypedEvent<[string, string], AvatarSetEventObject>;

export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;

export interface ChangedGuardEventObject {
  guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RolesModSetupEventObject {
  initiator: string;
  owner: string;
  avatar: string;
  target: string;
}
export type RolesModSetupEvent = TypedEvent<
  [string, string, string, string],
  RolesModSetupEventObject
>;

export type RolesModSetupEventFilter = TypedEventFilter<RolesModSetupEvent>;

export interface SetMultisendAddressEventObject {
  multisendAddress: string;
}
export type SetMultisendAddressEvent = TypedEvent<
  [string],
  SetMultisendAddressEventObject
>;

export type SetMultisendAddressEventFilter =
  TypedEventFilter<SetMultisendAddressEvent>;

export interface TargetSetEventObject {
  previousTarget: string;
  newTarget: string;
}
export type TargetSetEvent = TypedEvent<[string, string], TargetSetEventObject>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export interface Bacroles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BacrolesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    avatar(overrides?: CallOverrides): Promise<[string]>;

    badger(overrides?: CallOverrides): Promise<[string]>;

    execTransactionFromModule(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGuard(overrides?: CallOverrides): Promise<[string] & { _guard: string }>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    multisend(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeAllowFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      isParamScoped: PromiseOrValue<boolean>[],
      paramType: PromiseOrValue<BigNumberish>[],
      paramComp: PromiseOrValue<BigNumberish>[],
      compValue: PromiseOrValue<BytesLike>[],
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeFunctionExecutionOptions(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      paramComp: PromiseOrValue<BigNumberish>,
      compValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeParameterAsOneOf(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      compValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeRevokeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scopeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMultisend(
      _multisend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unscopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBadger(
      _newBadger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowTarget(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    options: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  avatar(overrides?: CallOverrides): Promise<string>;

  badger(overrides?: CallOverrides): Promise<string>;

  execTransactionFromModule(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    badgeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    badgeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  guard(overrides?: CallOverrides): Promise<string>;

  multisend(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeTarget(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeAllowFunction(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    options: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeFunction(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    isParamScoped: PromiseOrValue<boolean>[],
    paramType: PromiseOrValue<BigNumberish>[],
    paramComp: PromiseOrValue<BigNumberish>[],
    compValue: PromiseOrValue<BytesLike>[],
    options: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeFunctionExecutionOptions(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    options: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeParameter(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    paramIndex: PromiseOrValue<BigNumberish>,
    paramType: PromiseOrValue<BigNumberish>,
    paramComp: PromiseOrValue<BigNumberish>,
    compValue: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeParameterAsOneOf(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    paramIndex: PromiseOrValue<BigNumberish>,
    paramType: PromiseOrValue<BigNumberish>,
    compValues: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeRevokeFunction(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scopeTarget(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGuard(
    _guard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMultisend(
    _multisend: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unscopeParameter(
    badgeId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<string>,
    functionSig: PromiseOrValue<BytesLike>,
    paramIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBadger(
    _newBadger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    avatar(overrides?: CallOverrides): Promise<string>;

    badger(overrides?: CallOverrides): Promise<string>;

    execTransactionFromModule(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    guard(overrides?: CallOverrides): Promise<string>;

    multisend(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeAllowFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      isParamScoped: PromiseOrValue<boolean>[],
      paramType: PromiseOrValue<BigNumberish>[],
      paramComp: PromiseOrValue<BigNumberish>[],
      compValue: PromiseOrValue<BytesLike>[],
      options: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeFunctionExecutionOptions(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      paramComp: PromiseOrValue<BigNumberish>,
      compValue: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeParameterAsOneOf(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      compValues: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    scopeRevokeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    scopeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultisend(
      _multisend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unscopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBadger(
      _newBadger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AvatarSet(address,address)"(
      previousAvatar?: PromiseOrValue<string> | null,
      newAvatar?: PromiseOrValue<string> | null
    ): AvatarSetEventFilter;
    AvatarSet(
      previousAvatar?: PromiseOrValue<string> | null,
      newAvatar?: PromiseOrValue<string> | null
    ): AvatarSetEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RolesModSetup(address,address,address,address)"(
      initiator?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      avatar?: PromiseOrValue<string> | null,
      target?: null
    ): RolesModSetupEventFilter;
    RolesModSetup(
      initiator?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      avatar?: PromiseOrValue<string> | null,
      target?: null
    ): RolesModSetupEventFilter;

    "SetMultisendAddress(address)"(
      multisendAddress?: null
    ): SetMultisendAddressEventFilter;
    SetMultisendAddress(
      multisendAddress?: null
    ): SetMultisendAddressEventFilter;

    "TargetSet(address,address)"(
      previousTarget?: PromiseOrValue<string> | null,
      newTarget?: PromiseOrValue<string> | null
    ): TargetSetEventFilter;
    TargetSet(
      previousTarget?: PromiseOrValue<string> | null,
      newTarget?: PromiseOrValue<string> | null
    ): TargetSetEventFilter;
  };

  estimateGas: {
    allowTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    badger(overrides?: CallOverrides): Promise<BigNumber>;

    execTransactionFromModule(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    multisend(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeAllowFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      isParamScoped: PromiseOrValue<boolean>[],
      paramType: PromiseOrValue<BigNumberish>[],
      paramComp: PromiseOrValue<BigNumberish>[],
      compValue: PromiseOrValue<BytesLike>[],
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeFunctionExecutionOptions(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      paramComp: PromiseOrValue<BigNumberish>,
      compValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeParameterAsOneOf(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      compValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeRevokeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scopeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMultisend(
      _multisend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unscopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBadger(
      _newBadger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      badgeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multisend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeAllowFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      isParamScoped: PromiseOrValue<boolean>[],
      paramType: PromiseOrValue<BigNumberish>[],
      paramComp: PromiseOrValue<BigNumberish>[],
      compValue: PromiseOrValue<BytesLike>[],
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeFunctionExecutionOptions(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      options: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      paramComp: PromiseOrValue<BigNumberish>,
      compValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeParameterAsOneOf(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      paramType: PromiseOrValue<BigNumberish>,
      compValues: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeRevokeFunction(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scopeTarget(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMultisend(
      _multisend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unscopeParameter(
      badgeId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<string>,
      functionSig: PromiseOrValue<BytesLike>,
      paramIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBadger(
      _newBadger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
