/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface KolektivoguilderInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "checkProofOfPossession(address,bytes,bytes)": FunctionFragment;
    "creditGasFees(address,address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "debitGasFees(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBlockNumberFromHeader(bytes)": FunctionFragment;
    "getEpochNumber()": FunctionFragment;
    "getEpochNumberOfBlock(uint256)": FunctionFragment;
    "getEpochSize()": FunctionFragment;
    "getExchangeRegistryId()": FunctionFragment;
    "getInflationParameters()": FunctionFragment;
    "getParentSealBitmap(uint256)": FunctionFragment;
    "getVerifiedSealBitmapFromHeader(bytes)": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "hashHeader(bytes)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(string,string,uint8,address,uint256,uint256,string)": FunctionFragment;
    "minQuorumSize(uint256)": FunctionFragment;
    "minQuorumSizeInCurrentSet()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "numberValidatorsInCurrentSet()": FunctionFragment;
    "numberValidatorsInSet(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExchangeRegistryId(string)": FunctionFragment;
    "setInflationParameters(uint256,uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithComment(address,uint256,string)": FunctionFragment;
    "unitsToValue(uint256)": FunctionFragment;
    "validatorSignerAddressFromCurrentSet(uint256)": FunctionFragment;
    "validatorSignerAddressFromSet(uint256,uint256)": FunctionFragment;
    "valueToUnits(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "checkProofOfPossession"
      | "creditGasFees"
      | "debitGasFees"
      | "decimals"
      | "decreaseAllowance"
      | "fractionMulExp"
      | "getBlockNumberFromHeader"
      | "getEpochNumber"
      | "getEpochNumberOfBlock"
      | "getEpochSize"
      | "getExchangeRegistryId"
      | "getInflationParameters"
      | "getParentSealBitmap"
      | "getVerifiedSealBitmapFromHeader"
      | "getVersionNumber"
      | "hashHeader"
      | "increaseAllowance"
      | "initialize"
      | "minQuorumSize"
      | "minQuorumSizeInCurrentSet"
      | "mint"
      | "name"
      | "numberValidatorsInCurrentSet"
      | "numberValidatorsInSet"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "setExchangeRegistryId"
      | "setInflationParameters"
      | "setRegistry"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferWithComment"
      | "unitsToValue"
      | "validatorSignerAddressFromCurrentSet"
      | "validatorSignerAddressFromSet"
      | "valueToUnits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkProofOfPossession",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creditGasFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "debitGasFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fractionMulExp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberFromHeader",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochNumberOfBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRegistryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInflationParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentSealBitmap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedSealBitmapFromHeader",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashHeader",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minQuorumSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minQuorumSizeInCurrentSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberValidatorsInCurrentSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberValidatorsInSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeRegistryId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInflationParameters",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithComment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unitsToValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSignerAddressFromCurrentSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSignerAddressFromSet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueToUnits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkProofOfPossession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditGasFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debitGasFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fractionMulExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberFromHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochNumberOfBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRegistryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInflationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentSealBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedSealBitmapFromHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashHeader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minQuorumSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minQuorumSizeInCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberValidatorsInCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberValidatorsInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeRegistryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitsToValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSignerAddressFromCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSignerAddressFromSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueToUnits",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExchangeIdentifierUpdated(bytes32,bytes32)": EventFragment;
    "InflationFactorUpdated(uint256,uint256)": EventFragment;
    "InflationParametersUpdated(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferComment(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeIdentifierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationFactorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationParametersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferComment"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ExchangeIdentifierUpdatedEventObject {
  oldId: string;
  newId: string;
}
export type ExchangeIdentifierUpdatedEvent = TypedEvent<
  [string, string],
  ExchangeIdentifierUpdatedEventObject
>;

export type ExchangeIdentifierUpdatedEventFilter =
  TypedEventFilter<ExchangeIdentifierUpdatedEvent>;

export interface InflationFactorUpdatedEventObject {
  factor: BigNumber;
  lastUpdated: BigNumber;
}
export type InflationFactorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  InflationFactorUpdatedEventObject
>;

export type InflationFactorUpdatedEventFilter =
  TypedEventFilter<InflationFactorUpdatedEvent>;

export interface InflationParametersUpdatedEventObject {
  rate: BigNumber;
  updatePeriod: BigNumber;
  lastUpdated: BigNumber;
}
export type InflationParametersUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  InflationParametersUpdatedEventObject
>;

export type InflationParametersUpdatedEventFilter =
  TypedEventFilter<InflationParametersUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegistrySetEventObject {
  registryAddress: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferCommentEventObject {
  comment: string;
}
export type TransferCommentEvent = TypedEvent<
  [string],
  TransferCommentEventObject
>;

export type TransferCommentEventFilter = TypedEventFilter<TransferCommentEvent>;

export interface Kolektivoguilder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KolektivoguilderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      accountOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkProofOfPossession(
      sender: PromiseOrValue<string>,
      blsKey: PromiseOrValue<BytesLike>,
      blsPop: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    creditGasFees(
      from: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      gatewayFeeRecipient: PromiseOrValue<string>,
      communityFund: PromiseOrValue<string>,
      refund: PromiseOrValue<BigNumberish>,
      tipTxFee: PromiseOrValue<BigNumberish>,
      gatewayFee: PromiseOrValue<BigNumberish>,
      baseTxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debitGasFees(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fractionMulExp(
      aNumerator: PromiseOrValue<BigNumberish>,
      aDenominator: PromiseOrValue<BigNumberish>,
      bNumerator: PromiseOrValue<BigNumberish>,
      bDenominator: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBlockNumberFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochNumberOfBlock(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeRegistryId(overrides?: CallOverrides): Promise<[string]>;

    getInflationParameters(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getParentSealBitmap(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVerifiedSealBitmapFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    hashHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      registryAddress: PromiseOrValue<string>,
      inflationRate: PromiseOrValue<BigNumberish>,
      inflationFactorUpdatePeriod: PromiseOrValue<BigNumberish>,
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minQuorumSize(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberValidatorsInCurrentSet(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberValidatorsInSet(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchangeRegistryId(
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInflationParameters(
      rate: PromiseOrValue<BigNumberish>,
      updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferWithComment(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unitsToValue(
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorSignerAddressFromCurrentSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorSignerAddressFromSet(
      index: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    valueToUnits(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  allowance(
    accountOwner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    accountOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkProofOfPossession(
    sender: PromiseOrValue<string>,
    blsKey: PromiseOrValue<BytesLike>,
    blsPop: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creditGasFees(
    from: PromiseOrValue<string>,
    feeRecipient: PromiseOrValue<string>,
    gatewayFeeRecipient: PromiseOrValue<string>,
    communityFund: PromiseOrValue<string>,
    refund: PromiseOrValue<BigNumberish>,
    tipTxFee: PromiseOrValue<BigNumberish>,
    gatewayFee: PromiseOrValue<BigNumberish>,
    baseTxFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debitGasFees(
    from: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fractionMulExp(
    aNumerator: PromiseOrValue<BigNumberish>,
    aDenominator: PromiseOrValue<BigNumberish>,
    bNumerator: PromiseOrValue<BigNumberish>,
    bDenominator: PromiseOrValue<BigNumberish>,
    exponent: PromiseOrValue<BigNumberish>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getBlockNumberFromHeader(
    header: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeRegistryId(overrides?: CallOverrides): Promise<string>;

  getInflationParameters(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getParentSealBitmap(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  hashHeader(
    header: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    registryAddress: PromiseOrValue<string>,
    inflationRate: PromiseOrValue<BigNumberish>,
    inflationFactorUpdatePeriod: PromiseOrValue<BigNumberish>,
    exchangeIdentifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minQuorumSize(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchangeRegistryId(
    exchangeIdentifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInflationParameters(
    rate: PromiseOrValue<BigNumberish>,
    updatePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferWithComment(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    comment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unitsToValue(
    units: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatorSignerAddressFromCurrentSet(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: PromiseOrValue<BigNumberish>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  valueToUnits(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    allowance(
      accountOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkProofOfPossession(
      sender: PromiseOrValue<string>,
      blsKey: PromiseOrValue<BytesLike>,
      blsPop: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creditGasFees(
      from: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      gatewayFeeRecipient: PromiseOrValue<string>,
      communityFund: PromiseOrValue<string>,
      refund: PromiseOrValue<BigNumberish>,
      tipTxFee: PromiseOrValue<BigNumberish>,
      gatewayFee: PromiseOrValue<BigNumberish>,
      baseTxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    debitGasFees(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fractionMulExp(
      aNumerator: PromiseOrValue<BigNumberish>,
      aDenominator: PromiseOrValue<BigNumberish>,
      bNumerator: PromiseOrValue<BigNumberish>,
      bDenominator: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBlockNumberFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochNumberOfBlock(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRegistryId(overrides?: CallOverrides): Promise<string>;

    getInflationParameters(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getParentSealBitmap(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVerifiedSealBitmapFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    hashHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      registryAddress: PromiseOrValue<string>,
      inflationRate: PromiseOrValue<BigNumberish>,
      inflationFactorUpdatePeriod: PromiseOrValue<BigNumberish>,
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    minQuorumSize(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInSet(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExchangeRegistryId(
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInflationParameters(
      rate: PromiseOrValue<BigNumberish>,
      updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithComment(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unitsToValue(
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSignerAddressFromCurrentSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorSignerAddressFromSet(
      index: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    valueToUnits(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ExchangeIdentifierUpdated(bytes32,bytes32)"(
      oldId?: null,
      newId?: null
    ): ExchangeIdentifierUpdatedEventFilter;
    ExchangeIdentifierUpdated(
      oldId?: null,
      newId?: null
    ): ExchangeIdentifierUpdatedEventFilter;

    "InflationFactorUpdated(uint256,uint256)"(
      factor?: null,
      lastUpdated?: null
    ): InflationFactorUpdatedEventFilter;
    InflationFactorUpdated(
      factor?: null,
      lastUpdated?: null
    ): InflationFactorUpdatedEventFilter;

    "InflationParametersUpdated(uint256,uint256,uint256)"(
      rate?: null,
      updatePeriod?: null,
      lastUpdated?: null
    ): InflationParametersUpdatedEventFilter;
    InflationParametersUpdated(
      rate?: null,
      updatePeriod?: null,
      lastUpdated?: null
    ): InflationParametersUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RegistrySet(address)"(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;
    RegistrySet(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "TransferComment(string)"(comment?: null): TransferCommentEventFilter;
    TransferComment(comment?: null): TransferCommentEventFilter;
  };

  estimateGas: {
    allowance(
      accountOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkProofOfPossession(
      sender: PromiseOrValue<string>,
      blsKey: PromiseOrValue<BytesLike>,
      blsPop: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditGasFees(
      from: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      gatewayFeeRecipient: PromiseOrValue<string>,
      communityFund: PromiseOrValue<string>,
      refund: PromiseOrValue<BigNumberish>,
      tipTxFee: PromiseOrValue<BigNumberish>,
      gatewayFee: PromiseOrValue<BigNumberish>,
      baseTxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debitGasFees(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fractionMulExp(
      aNumerator: PromiseOrValue<BigNumberish>,
      aDenominator: PromiseOrValue<BigNumberish>,
      bNumerator: PromiseOrValue<BigNumberish>,
      bDenominator: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumberFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochNumberOfBlock(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRegistryId(overrides?: CallOverrides): Promise<BigNumber>;

    getInflationParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getParentSealBitmap(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiedSealBitmapFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    hashHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      registryAddress: PromiseOrValue<string>,
      inflationRate: PromiseOrValue<BigNumberish>,
      inflationFactorUpdatePeriod: PromiseOrValue<BigNumberish>,
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minQuorumSize(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInSet(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchangeRegistryId(
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInflationParameters(
      rate: PromiseOrValue<BigNumberish>,
      updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferWithComment(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unitsToValue(
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSignerAddressFromCurrentSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSignerAddressFromSet(
      index: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueToUnits(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      accountOwner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      accountOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkProofOfPossession(
      sender: PromiseOrValue<string>,
      blsKey: PromiseOrValue<BytesLike>,
      blsPop: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditGasFees(
      from: PromiseOrValue<string>,
      feeRecipient: PromiseOrValue<string>,
      gatewayFeeRecipient: PromiseOrValue<string>,
      communityFund: PromiseOrValue<string>,
      refund: PromiseOrValue<BigNumberish>,
      tipTxFee: PromiseOrValue<BigNumberish>,
      gatewayFee: PromiseOrValue<BigNumberish>,
      baseTxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debitGasFees(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fractionMulExp(
      aNumerator: PromiseOrValue<BigNumberish>,
      aDenominator: PromiseOrValue<BigNumberish>,
      bNumerator: PromiseOrValue<BigNumberish>,
      bDenominator: PromiseOrValue<BigNumberish>,
      exponent: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumberFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochNumberOfBlock(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRegistryId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInflationParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentSealBitmap(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiedSealBitmapFromHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashHeader(
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      registryAddress: PromiseOrValue<string>,
      inflationRate: PromiseOrValue<BigNumberish>,
      inflationFactorUpdatePeriod: PromiseOrValue<BigNumberish>,
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minQuorumSize(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minQuorumSizeInCurrentSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberValidatorsInCurrentSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberValidatorsInSet(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeRegistryId(
      exchangeIdentifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInflationParameters(
      rate: PromiseOrValue<BigNumberish>,
      updatePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferWithComment(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unitsToValue(
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSignerAddressFromCurrentSet(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSignerAddressFromSet(
      index: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueToUnits(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
