/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MentoexchangeInterface extends utils.Interface {
  functions: {
    "activateStable()": FunctionFragment;
    "buy(uint256,uint256,bool)": FunctionFragment;
    "exchange(uint256,uint256,bool)": FunctionFragment;
    "getBuyAndSellBuckets(bool)": FunctionFragment;
    "getBuyTokenAmount(uint256,bool)": FunctionFragment;
    "getSellTokenAmount(uint256,bool)": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "goldBucket()": FunctionFragment;
    "initialize(address,string,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lastBucketUpdate()": FunctionFragment;
    "minimumReports()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveFraction()": FunctionFragment;
    "sell(uint256,uint256,bool)": FunctionFragment;
    "setMinimumReports(uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setReserveFraction(uint256)": FunctionFragment;
    "setSpread(uint256)": FunctionFragment;
    "setStableToken(address)": FunctionFragment;
    "setUpdateFrequency(uint256)": FunctionFragment;
    "spread()": FunctionFragment;
    "stable()": FunctionFragment;
    "stableBucket()": FunctionFragment;
    "stableTokenRegistryId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFrequency()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateStable"
      | "buy"
      | "exchange"
      | "getBuyAndSellBuckets"
      | "getBuyTokenAmount"
      | "getSellTokenAmount"
      | "getVersionNumber"
      | "goldBucket"
      | "initialize"
      | "lastBucketUpdate"
      | "minimumReports"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "reserveFraction"
      | "sell"
      | "setMinimumReports"
      | "setRegistry"
      | "setReserveFraction"
      | "setSpread"
      | "setStableToken"
      | "setUpdateFrequency"
      | "spread"
      | "stable"
      | "stableBucket"
      | "stableTokenRegistryId"
      | "transferOwnership"
      | "updateFrequency"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyAndSellBuckets",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyTokenAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellTokenAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goldBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBucketUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumReports",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumReports",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFraction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpread",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateFrequency",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "spread", values?: undefined): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stableBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableTokenRegistryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFrequency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyAndSellBuckets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goldBucket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBucketUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSpread", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTokenRegistryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFrequency",
    data: BytesLike
  ): Result;

  events: {
    "BucketsUpdated(uint256,uint256)": EventFragment;
    "Exchanged(address,uint256,uint256,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MinimumReportsSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "ReserveFractionSet(uint256)": EventFragment;
    "SpreadSet(uint256)": EventFragment;
    "StableTokenSet(address)": EventFragment;
    "UpdateFrequencySet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BucketsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exchanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumReportsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFractionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpreadSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFrequencySet"): EventFragment;
}

export interface BucketsUpdatedEventObject {
  goldBucket: BigNumber;
  stableBucket: BigNumber;
}
export type BucketsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BucketsUpdatedEventObject
>;

export type BucketsUpdatedEventFilter = TypedEventFilter<BucketsUpdatedEvent>;

export interface ExchangedEventObject {
  exchanger: string;
  sellAmount: BigNumber;
  buyAmount: BigNumber;
  soldGold: boolean;
}
export type ExchangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  ExchangedEventObject
>;

export type ExchangedEventFilter = TypedEventFilter<ExchangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MinimumReportsSetEventObject {
  minimumReports: BigNumber;
}
export type MinimumReportsSetEvent = TypedEvent<
  [BigNumber],
  MinimumReportsSetEventObject
>;

export type MinimumReportsSetEventFilter =
  TypedEventFilter<MinimumReportsSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegistrySetEventObject {
  registryAddress: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface ReserveFractionSetEventObject {
  reserveFraction: BigNumber;
}
export type ReserveFractionSetEvent = TypedEvent<
  [BigNumber],
  ReserveFractionSetEventObject
>;

export type ReserveFractionSetEventFilter =
  TypedEventFilter<ReserveFractionSetEvent>;

export interface SpreadSetEventObject {
  spread: BigNumber;
}
export type SpreadSetEvent = TypedEvent<[BigNumber], SpreadSetEventObject>;

export type SpreadSetEventFilter = TypedEventFilter<SpreadSetEvent>;

export interface StableTokenSetEventObject {
  stable: string;
}
export type StableTokenSetEvent = TypedEvent<
  [string],
  StableTokenSetEventObject
>;

export type StableTokenSetEventFilter = TypedEventFilter<StableTokenSetEvent>;

export interface UpdateFrequencySetEventObject {
  updateFrequency: BigNumber;
}
export type UpdateFrequencySetEvent = TypedEvent<
  [BigNumber],
  UpdateFrequencySetEventObject
>;

export type UpdateFrequencySetEventFilter =
  TypedEventFilter<UpdateFrequencySetEvent>;

export interface Mentoexchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MentoexchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateStable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      buyAmount: PromiseOrValue<BigNumberish>,
      maxSellAmount: PromiseOrValue<BigNumberish>,
      buyGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchange(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBuyAndSellBuckets(
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBuyTokenAmount(
      sellAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellTokenAmount(
      buyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    goldBucket(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      stableTokenIdentifier: PromiseOrValue<string>,
      _spread: PromiseOrValue<BigNumberish>,
      _reserveFraction: PromiseOrValue<BigNumberish>,
      _updateFrequency: PromiseOrValue<BigNumberish>,
      _minimumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastBucketUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumReports(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveFraction(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    sell(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumReports(
      newMininumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserveFraction(
      newReserveFraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStableToken(
      newStableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdateFrequency(
      newUpdateFrequency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spread(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    stable(overrides?: CallOverrides): Promise<[string]>;

    stableBucket(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTokenRegistryId(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activateStable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    buyAmount: PromiseOrValue<BigNumberish>,
    maxSellAmount: PromiseOrValue<BigNumberish>,
    buyGold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchange(
    sellAmount: PromiseOrValue<BigNumberish>,
    minBuyAmount: PromiseOrValue<BigNumberish>,
    sellGold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBuyAndSellBuckets(
    sellGold: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getBuyTokenAmount(
    sellAmount: PromiseOrValue<BigNumberish>,
    sellGold: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellTokenAmount(
    buyAmount: PromiseOrValue<BigNumberish>,
    sellGold: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  goldBucket(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    registryAddress: PromiseOrValue<string>,
    stableTokenIdentifier: PromiseOrValue<string>,
    _spread: PromiseOrValue<BigNumberish>,
    _reserveFraction: PromiseOrValue<BigNumberish>,
    _updateFrequency: PromiseOrValue<BigNumberish>,
    _minimumReports: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastBucketUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  minimumReports(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveFraction(overrides?: CallOverrides): Promise<BigNumber>;

  sell(
    sellAmount: PromiseOrValue<BigNumberish>,
    minBuyAmount: PromiseOrValue<BigNumberish>,
    sellGold: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumReports(
    newMininumReports: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserveFraction(
    newReserveFraction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpread(
    newSpread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStableToken(
    newStableToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdateFrequency(
    newUpdateFrequency: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spread(overrides?: CallOverrides): Promise<BigNumber>;

  stable(overrides?: CallOverrides): Promise<string>;

  stableBucket(overrides?: CallOverrides): Promise<BigNumber>;

  stableTokenRegistryId(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activateStable(overrides?: CallOverrides): Promise<void>;

    buy(
      buyAmount: PromiseOrValue<BigNumberish>,
      maxSellAmount: PromiseOrValue<BigNumberish>,
      buyGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyAndSellBuckets(
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBuyTokenAmount(
      sellAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellTokenAmount(
      buyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    goldBucket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      stableTokenIdentifier: PromiseOrValue<string>,
      _spread: PromiseOrValue<BigNumberish>,
      _reserveFraction: PromiseOrValue<BigNumberish>,
      _updateFrequency: PromiseOrValue<BigNumberish>,
      _minimumReports: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastBucketUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    minimumReports(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveFraction(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinimumReports(
      newMininumReports: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveFraction(
      newReserveFraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableToken(
      newStableToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateFrequency(
      newUpdateFrequency: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    spread(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<string>;

    stableBucket(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokenRegistryId(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BucketsUpdated(uint256,uint256)"(
      goldBucket?: null,
      stableBucket?: null
    ): BucketsUpdatedEventFilter;
    BucketsUpdated(
      goldBucket?: null,
      stableBucket?: null
    ): BucketsUpdatedEventFilter;

    "Exchanged(address,uint256,uint256,bool)"(
      exchanger?: PromiseOrValue<string> | null,
      sellAmount?: null,
      buyAmount?: null,
      soldGold?: null
    ): ExchangedEventFilter;
    Exchanged(
      exchanger?: PromiseOrValue<string> | null,
      sellAmount?: null,
      buyAmount?: null,
      soldGold?: null
    ): ExchangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MinimumReportsSet(uint256)"(
      minimumReports?: null
    ): MinimumReportsSetEventFilter;
    MinimumReportsSet(minimumReports?: null): MinimumReportsSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RegistrySet(address)"(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;
    RegistrySet(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;

    "ReserveFractionSet(uint256)"(
      reserveFraction?: null
    ): ReserveFractionSetEventFilter;
    ReserveFractionSet(reserveFraction?: null): ReserveFractionSetEventFilter;

    "SpreadSet(uint256)"(spread?: null): SpreadSetEventFilter;
    SpreadSet(spread?: null): SpreadSetEventFilter;

    "StableTokenSet(address)"(
      stable?: PromiseOrValue<string> | null
    ): StableTokenSetEventFilter;
    StableTokenSet(
      stable?: PromiseOrValue<string> | null
    ): StableTokenSetEventFilter;

    "UpdateFrequencySet(uint256)"(
      updateFrequency?: null
    ): UpdateFrequencySetEventFilter;
    UpdateFrequencySet(updateFrequency?: null): UpdateFrequencySetEventFilter;
  };

  estimateGas: {
    activateStable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      buyAmount: PromiseOrValue<BigNumberish>,
      maxSellAmount: PromiseOrValue<BigNumberish>,
      buyGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchange(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBuyAndSellBuckets(
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyTokenAmount(
      sellAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellTokenAmount(
      buyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    goldBucket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      stableTokenIdentifier: PromiseOrValue<string>,
      _spread: PromiseOrValue<BigNumberish>,
      _reserveFraction: PromiseOrValue<BigNumberish>,
      _updateFrequency: PromiseOrValue<BigNumberish>,
      _minimumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastBucketUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    minimumReports(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveFraction(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumReports(
      newMininumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserveFraction(
      newReserveFraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStableToken(
      newStableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdateFrequency(
      newUpdateFrequency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spread(overrides?: CallOverrides): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    stableBucket(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokenRegistryId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateStable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      buyAmount: PromiseOrValue<BigNumberish>,
      maxSellAmount: PromiseOrValue<BigNumberish>,
      buyGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchange(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBuyAndSellBuckets(
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyTokenAmount(
      sellAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellTokenAmount(
      buyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goldBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      stableTokenIdentifier: PromiseOrValue<string>,
      _spread: PromiseOrValue<BigNumberish>,
      _reserveFraction: PromiseOrValue<BigNumberish>,
      _updateFrequency: PromiseOrValue<BigNumberish>,
      _minimumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastBucketUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumReports(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveFraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      sellAmount: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      sellGold: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumReports(
      newMininumReports: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserveFraction(
      newReserveFraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStableToken(
      newStableToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateFrequency(
      newUpdateFrequency: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableTokenRegistryId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
