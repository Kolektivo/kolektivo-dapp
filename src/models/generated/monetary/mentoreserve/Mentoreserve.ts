/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MentoreserveInterface extends utils.Interface {
  functions: {
    "addExchangeSpender(address)": FunctionFragment;
    "addOtherReserveAddress(address)": FunctionFragment;
    "addSpender(address)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "assetAllocationSymbols(uint256)": FunctionFragment;
    "assetAllocationWeights(bytes32)": FunctionFragment;
    "exchangeSpenderAddresses(uint256)": FunctionFragment;
    "frozenReserveGoldDays()": FunctionFragment;
    "frozenReserveGoldStartBalance()": FunctionFragment;
    "frozenReserveGoldStartDay()": FunctionFragment;
    "getAssetAllocationSymbols()": FunctionFragment;
    "getAssetAllocationWeights()": FunctionFragment;
    "getDailySpendingRatio()": FunctionFragment;
    "getExchangeSpenders()": FunctionFragment;
    "getFrozenReserveGoldBalance()": FunctionFragment;
    "getOrComputeTobinTax()": FunctionFragment;
    "getOtherReserveAddresses()": FunctionFragment;
    "getOtherReserveAddressesGoldBalance()": FunctionFragment;
    "getReserveGoldBalance()": FunctionFragment;
    "getReserveRatio()": FunctionFragment;
    "getTokens()": FunctionFragment;
    "getUnfrozenBalance()": FunctionFragment;
    "getUnfrozenReserveGoldBalance()": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,bytes32[],uint256[],uint256,uint256)": FunctionFragment;
    "isExchangeSpender(address)": FunctionFragment;
    "isOtherReserveAddress(address)": FunctionFragment;
    "isSpender(address)": FunctionFragment;
    "isToken(address)": FunctionFragment;
    "lastSpendingDay()": FunctionFragment;
    "otherReserveAddresses(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "removeExchangeSpender(address,uint256)": FunctionFragment;
    "removeOtherReserveAddress(address,uint256)": FunctionFragment;
    "removeSpender(address)": FunctionFragment;
    "removeToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAssetAllocations(bytes32[],uint256[])": FunctionFragment;
    "setDailySpendingRatio(uint256)": FunctionFragment;
    "setFrozenGold(uint256,uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setTobinTax(uint256)": FunctionFragment;
    "setTobinTaxReserveRatio(uint256)": FunctionFragment;
    "setTobinTaxStalenessThreshold(uint256)": FunctionFragment;
    "spendingLimit()": FunctionFragment;
    "tobinTax()": FunctionFragment;
    "tobinTaxCache()": FunctionFragment;
    "tobinTaxReserveRatio()": FunctionFragment;
    "tobinTaxStalenessThreshold()": FunctionFragment;
    "transferExchangeGold(address,uint256)": FunctionFragment;
    "transferGold(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addExchangeSpender"
      | "addOtherReserveAddress"
      | "addSpender"
      | "addToken"
      | "assetAllocationSymbols"
      | "assetAllocationWeights"
      | "exchangeSpenderAddresses"
      | "frozenReserveGoldDays"
      | "frozenReserveGoldStartBalance"
      | "frozenReserveGoldStartDay"
      | "getAssetAllocationSymbols"
      | "getAssetAllocationWeights"
      | "getDailySpendingRatio"
      | "getExchangeSpenders"
      | "getFrozenReserveGoldBalance"
      | "getOrComputeTobinTax"
      | "getOtherReserveAddresses"
      | "getOtherReserveAddressesGoldBalance"
      | "getReserveGoldBalance"
      | "getReserveRatio"
      | "getTokens"
      | "getUnfrozenBalance"
      | "getUnfrozenReserveGoldBalance"
      | "getVersionNumber"
      | "initialize"
      | "isExchangeSpender"
      | "isOtherReserveAddress"
      | "isSpender"
      | "isToken"
      | "lastSpendingDay"
      | "otherReserveAddresses"
      | "owner"
      | "registry"
      | "removeExchangeSpender"
      | "removeOtherReserveAddress"
      | "removeSpender"
      | "removeToken"
      | "renounceOwnership"
      | "setAssetAllocations"
      | "setDailySpendingRatio"
      | "setFrozenGold"
      | "setRegistry"
      | "setTobinTax"
      | "setTobinTaxReserveRatio"
      | "setTobinTaxStalenessThreshold"
      | "spendingLimit"
      | "tobinTax"
      | "tobinTaxCache"
      | "tobinTaxReserveRatio"
      | "tobinTaxStalenessThreshold"
      | "transferExchangeGold"
      | "transferGold"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addExchangeSpender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addOtherReserveAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSpender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAllocationSymbols",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAllocationWeights",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeSpenderAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "frozenReserveGoldDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frozenReserveGoldStartBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frozenReserveGoldStartDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAllocationSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetAllocationWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailySpendingRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeSpenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFrozenReserveGoldBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrComputeTobinTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherReserveAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherReserveAddressesGoldBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveGoldBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnfrozenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnfrozenReserveGoldBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isExchangeSpender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOtherReserveAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSpendingDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "otherReserveAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExchangeSpender",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOtherReserveAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSpender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetAllocations",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailySpendingRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenGold",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTobinTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTobinTaxReserveRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTobinTaxStalenessThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tobinTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tobinTaxCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tobinTaxReserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tobinTaxStalenessThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferExchangeGold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addExchangeSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOtherReserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSpender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetAllocationSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAllocationWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeSpenderAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenReserveGoldDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenReserveGoldStartBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenReserveGoldStartDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAllocationSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetAllocationWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailySpendingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeSpenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFrozenReserveGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrComputeTobinTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherReserveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherReserveAddressesGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnfrozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnfrozenReserveGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExchangeSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOtherReserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSpender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSpendingDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherReserveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExchangeSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOtherReserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDailySpendingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTobinTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTobinTaxReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTobinTaxStalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tobinTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tobinTaxCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tobinTaxReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tobinTaxStalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExchangeGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetAllocationSet(bytes32[],uint256[])": EventFragment;
    "DailySpendingRatioSet(uint256)": EventFragment;
    "ExchangeSpenderAdded(address)": EventFragment;
    "ExchangeSpenderRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OtherReserveAddressAdded(address)": EventFragment;
    "OtherReserveAddressRemoved(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "ReserveGoldTransferred(address,address,uint256)": EventFragment;
    "SpenderAdded(address)": EventFragment;
    "SpenderRemoved(address)": EventFragment;
    "TobinTaxReserveRatioSet(uint256)": EventFragment;
    "TobinTaxSet(uint256)": EventFragment;
    "TobinTaxStalenessThresholdSet(uint256)": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokenRemoved(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAllocationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DailySpendingRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeSpenderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeSpenderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OtherReserveAddressAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OtherReserveAddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveGoldTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpenderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpenderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TobinTaxReserveRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TobinTaxSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TobinTaxStalenessThresholdSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
}

export interface AssetAllocationSetEventObject {
  symbols: string[];
  weights: BigNumber[];
}
export type AssetAllocationSetEvent = TypedEvent<
  [string[], BigNumber[]],
  AssetAllocationSetEventObject
>;

export type AssetAllocationSetEventFilter =
  TypedEventFilter<AssetAllocationSetEvent>;

export interface DailySpendingRatioSetEventObject {
  ratio: BigNumber;
}
export type DailySpendingRatioSetEvent = TypedEvent<
  [BigNumber],
  DailySpendingRatioSetEventObject
>;

export type DailySpendingRatioSetEventFilter =
  TypedEventFilter<DailySpendingRatioSetEvent>;

export interface ExchangeSpenderAddedEventObject {
  exchangeSpender: string;
}
export type ExchangeSpenderAddedEvent = TypedEvent<
  [string],
  ExchangeSpenderAddedEventObject
>;

export type ExchangeSpenderAddedEventFilter =
  TypedEventFilter<ExchangeSpenderAddedEvent>;

export interface ExchangeSpenderRemovedEventObject {
  exchangeSpender: string;
}
export type ExchangeSpenderRemovedEvent = TypedEvent<
  [string],
  ExchangeSpenderRemovedEventObject
>;

export type ExchangeSpenderRemovedEventFilter =
  TypedEventFilter<ExchangeSpenderRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OtherReserveAddressAddedEventObject {
  otherReserveAddress: string;
}
export type OtherReserveAddressAddedEvent = TypedEvent<
  [string],
  OtherReserveAddressAddedEventObject
>;

export type OtherReserveAddressAddedEventFilter =
  TypedEventFilter<OtherReserveAddressAddedEvent>;

export interface OtherReserveAddressRemovedEventObject {
  otherReserveAddress: string;
  index: BigNumber;
}
export type OtherReserveAddressRemovedEvent = TypedEvent<
  [string, BigNumber],
  OtherReserveAddressRemovedEventObject
>;

export type OtherReserveAddressRemovedEventFilter =
  TypedEventFilter<OtherReserveAddressRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegistrySetEventObject {
  registryAddress: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface ReserveGoldTransferredEventObject {
  spender: string;
  to: string;
  value: BigNumber;
}
export type ReserveGoldTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  ReserveGoldTransferredEventObject
>;

export type ReserveGoldTransferredEventFilter =
  TypedEventFilter<ReserveGoldTransferredEvent>;

export interface SpenderAddedEventObject {
  spender: string;
}
export type SpenderAddedEvent = TypedEvent<[string], SpenderAddedEventObject>;

export type SpenderAddedEventFilter = TypedEventFilter<SpenderAddedEvent>;

export interface SpenderRemovedEventObject {
  spender: string;
}
export type SpenderRemovedEvent = TypedEvent<
  [string],
  SpenderRemovedEventObject
>;

export type SpenderRemovedEventFilter = TypedEventFilter<SpenderRemovedEvent>;

export interface TobinTaxReserveRatioSetEventObject {
  value: BigNumber;
}
export type TobinTaxReserveRatioSetEvent = TypedEvent<
  [BigNumber],
  TobinTaxReserveRatioSetEventObject
>;

export type TobinTaxReserveRatioSetEventFilter =
  TypedEventFilter<TobinTaxReserveRatioSetEvent>;

export interface TobinTaxSetEventObject {
  value: BigNumber;
}
export type TobinTaxSetEvent = TypedEvent<[BigNumber], TobinTaxSetEventObject>;

export type TobinTaxSetEventFilter = TypedEventFilter<TobinTaxSetEvent>;

export interface TobinTaxStalenessThresholdSetEventObject {
  value: BigNumber;
}
export type TobinTaxStalenessThresholdSetEvent = TypedEvent<
  [BigNumber],
  TobinTaxStalenessThresholdSetEventObject
>;

export type TobinTaxStalenessThresholdSetEventFilter =
  TypedEventFilter<TobinTaxStalenessThresholdSetEvent>;

export interface TokenAddedEventObject {
  token: string;
}
export type TokenAddedEvent = TypedEvent<[string], TokenAddedEventObject>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenRemovedEventObject {
  token: string;
  index: BigNumber;
}
export type TokenRemovedEvent = TypedEvent<
  [string, BigNumber],
  TokenRemovedEventObject
>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface Mentoreserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MentoreserveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addExchangeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetAllocationSymbols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetAllocationWeights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exchangeSpenderAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    frozenReserveGoldDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    frozenReserveGoldStartBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    frozenReserveGoldStartDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetAllocationSymbols(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetAllocationWeights(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getDailySpendingRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeSpenders(overrides?: CallOverrides): Promise<[string[]]>;

    getFrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOrComputeTobinTax(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOtherReserveAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getOtherReserveAddressesGoldBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveGoldBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUnfrozenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnfrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      _tobinTaxStalenessThreshold: PromiseOrValue<BigNumberish>,
      _spendingRatio: PromiseOrValue<BigNumberish>,
      _frozenGold: PromiseOrValue<BigNumberish>,
      _frozenDays: PromiseOrValue<BigNumberish>,
      _assetAllocationSymbols: PromiseOrValue<BytesLike>[],
      _assetAllocationWeights: PromiseOrValue<BigNumberish>[],
      _tobinTax: PromiseOrValue<BigNumberish>,
      _tobinTaxReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExchangeSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOtherReserveAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastSpendingDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    otherReserveAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeExchangeSpender(
      spender: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAssetAllocations(
      symbols: PromiseOrValue<BytesLike>[],
      weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDailySpendingRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFrozenGold(
      frozenGold: PromiseOrValue<BigNumberish>,
      frozenDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTobinTax(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTobinTaxReserveRatio(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTobinTaxStalenessThreshold(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spendingLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    tobinTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    tobinTaxCache(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; timestamp: BigNumber }
    >;

    tobinTaxReserveRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    tobinTaxStalenessThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferExchangeGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addExchangeSpender(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOtherReserveAddress(
    reserveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSpender(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetAllocationSymbols(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetAllocationWeights(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeSpenderAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  frozenReserveGoldDays(overrides?: CallOverrides): Promise<BigNumber>;

  frozenReserveGoldStartBalance(overrides?: CallOverrides): Promise<BigNumber>;

  frozenReserveGoldStartDay(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetAllocationSymbols(overrides?: CallOverrides): Promise<string[]>;

  getAssetAllocationWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDailySpendingRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeSpenders(overrides?: CallOverrides): Promise<string[]>;

  getFrozenReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getOrComputeTobinTax(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOtherReserveAddresses(overrides?: CallOverrides): Promise<string[]>;

  getOtherReserveAddressesGoldBalance(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  getUnfrozenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getUnfrozenReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize(
    registryAddress: PromiseOrValue<string>,
    _tobinTaxStalenessThreshold: PromiseOrValue<BigNumberish>,
    _spendingRatio: PromiseOrValue<BigNumberish>,
    _frozenGold: PromiseOrValue<BigNumberish>,
    _frozenDays: PromiseOrValue<BigNumberish>,
    _assetAllocationSymbols: PromiseOrValue<BytesLike>[],
    _assetAllocationWeights: PromiseOrValue<BigNumberish>[],
    _tobinTax: PromiseOrValue<BigNumberish>,
    _tobinTaxReserveRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExchangeSpender(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOtherReserveAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSpender(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastSpendingDay(overrides?: CallOverrides): Promise<BigNumber>;

  otherReserveAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeExchangeSpender(
    spender: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOtherReserveAddress(
    reserveAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSpender(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    token: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAssetAllocations(
    symbols: PromiseOrValue<BytesLike>[],
    weights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDailySpendingRatio(
    ratio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFrozenGold(
    frozenGold: PromiseOrValue<BigNumberish>,
    frozenDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTobinTax(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTobinTaxReserveRatio(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTobinTaxStalenessThreshold(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spendingLimit(overrides?: CallOverrides): Promise<BigNumber>;

  tobinTax(overrides?: CallOverrides): Promise<BigNumber>;

  tobinTaxCache(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; timestamp: BigNumber }
  >;

  tobinTaxReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  tobinTaxStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  transferExchangeGold(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferGold(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addExchangeSpender(
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addSpender(
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetAllocationSymbols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetAllocationWeights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeSpenderAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    frozenReserveGoldDays(overrides?: CallOverrides): Promise<BigNumber>;

    frozenReserveGoldStartBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frozenReserveGoldStartDay(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetAllocationSymbols(overrides?: CallOverrides): Promise<string[]>;

    getAssetAllocationWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDailySpendingRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeSpenders(overrides?: CallOverrides): Promise<string[]>;

    getFrozenReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getOrComputeTobinTax(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getOtherReserveAddresses(overrides?: CallOverrides): Promise<string[]>;

    getOtherReserveAddressesGoldBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    getUnfrozenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getUnfrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      _tobinTaxStalenessThreshold: PromiseOrValue<BigNumberish>,
      _spendingRatio: PromiseOrValue<BigNumberish>,
      _frozenGold: PromiseOrValue<BigNumberish>,
      _frozenDays: PromiseOrValue<BigNumberish>,
      _assetAllocationSymbols: PromiseOrValue<BytesLike>[],
      _assetAllocationWeights: PromiseOrValue<BigNumberish>[],
      _tobinTax: PromiseOrValue<BigNumberish>,
      _tobinTaxReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isExchangeSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOtherReserveAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastSpendingDay(overrides?: CallOverrides): Promise<BigNumber>;

    otherReserveAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeExchangeSpender(
      spender: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeSpender(
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAssetAllocations(
      symbols: PromiseOrValue<BytesLike>[],
      weights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDailySpendingRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenGold(
      frozenGold: PromiseOrValue<BigNumberish>,
      frozenDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTobinTax(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTobinTaxReserveRatio(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTobinTaxStalenessThreshold(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    spendingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTax(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTaxCache(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; timestamp: BigNumber }
    >;

    tobinTaxReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTaxStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferExchangeGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetAllocationSet(bytes32[],uint256[])"(
      symbols?: null,
      weights?: null
    ): AssetAllocationSetEventFilter;
    AssetAllocationSet(
      symbols?: null,
      weights?: null
    ): AssetAllocationSetEventFilter;

    "DailySpendingRatioSet(uint256)"(
      ratio?: null
    ): DailySpendingRatioSetEventFilter;
    DailySpendingRatioSet(ratio?: null): DailySpendingRatioSetEventFilter;

    "ExchangeSpenderAdded(address)"(
      exchangeSpender?: PromiseOrValue<string> | null
    ): ExchangeSpenderAddedEventFilter;
    ExchangeSpenderAdded(
      exchangeSpender?: PromiseOrValue<string> | null
    ): ExchangeSpenderAddedEventFilter;

    "ExchangeSpenderRemoved(address)"(
      exchangeSpender?: PromiseOrValue<string> | null
    ): ExchangeSpenderRemovedEventFilter;
    ExchangeSpenderRemoved(
      exchangeSpender?: PromiseOrValue<string> | null
    ): ExchangeSpenderRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OtherReserveAddressAdded(address)"(
      otherReserveAddress?: PromiseOrValue<string> | null
    ): OtherReserveAddressAddedEventFilter;
    OtherReserveAddressAdded(
      otherReserveAddress?: PromiseOrValue<string> | null
    ): OtherReserveAddressAddedEventFilter;

    "OtherReserveAddressRemoved(address,uint256)"(
      otherReserveAddress?: PromiseOrValue<string> | null,
      index?: null
    ): OtherReserveAddressRemovedEventFilter;
    OtherReserveAddressRemoved(
      otherReserveAddress?: PromiseOrValue<string> | null,
      index?: null
    ): OtherReserveAddressRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RegistrySet(address)"(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;
    RegistrySet(
      registryAddress?: PromiseOrValue<string> | null
    ): RegistrySetEventFilter;

    "ReserveGoldTransferred(address,address,uint256)"(
      spender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): ReserveGoldTransferredEventFilter;
    ReserveGoldTransferred(
      spender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): ReserveGoldTransferredEventFilter;

    "SpenderAdded(address)"(
      spender?: PromiseOrValue<string> | null
    ): SpenderAddedEventFilter;
    SpenderAdded(
      spender?: PromiseOrValue<string> | null
    ): SpenderAddedEventFilter;

    "SpenderRemoved(address)"(
      spender?: PromiseOrValue<string> | null
    ): SpenderRemovedEventFilter;
    SpenderRemoved(
      spender?: PromiseOrValue<string> | null
    ): SpenderRemovedEventFilter;

    "TobinTaxReserveRatioSet(uint256)"(
      value?: null
    ): TobinTaxReserveRatioSetEventFilter;
    TobinTaxReserveRatioSet(value?: null): TobinTaxReserveRatioSetEventFilter;

    "TobinTaxSet(uint256)"(value?: null): TobinTaxSetEventFilter;
    TobinTaxSet(value?: null): TobinTaxSetEventFilter;

    "TobinTaxStalenessThresholdSet(uint256)"(
      value?: null
    ): TobinTaxStalenessThresholdSetEventFilter;
    TobinTaxStalenessThresholdSet(
      value?: null
    ): TobinTaxStalenessThresholdSetEventFilter;

    "TokenAdded(address)"(
      token?: PromiseOrValue<string> | null
    ): TokenAddedEventFilter;
    TokenAdded(token?: PromiseOrValue<string> | null): TokenAddedEventFilter;

    "TokenRemoved(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      index?: null
    ): TokenRemovedEventFilter;
    TokenRemoved(
      token?: PromiseOrValue<string> | null,
      index?: null
    ): TokenRemovedEventFilter;
  };

  estimateGas: {
    addExchangeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetAllocationSymbols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetAllocationWeights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeSpenderAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frozenReserveGoldDays(overrides?: CallOverrides): Promise<BigNumber>;

    frozenReserveGoldStartBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    frozenReserveGoldStartDay(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetAllocationSymbols(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetAllocationWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getDailySpendingRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeSpenders(overrides?: CallOverrides): Promise<BigNumber>;

    getFrozenReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getOrComputeTobinTax(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOtherReserveAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getOtherReserveAddressesGoldBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveGoldBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUnfrozenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getUnfrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      _tobinTaxStalenessThreshold: PromiseOrValue<BigNumberish>,
      _spendingRatio: PromiseOrValue<BigNumberish>,
      _frozenGold: PromiseOrValue<BigNumberish>,
      _frozenDays: PromiseOrValue<BigNumberish>,
      _assetAllocationSymbols: PromiseOrValue<BytesLike>[],
      _assetAllocationWeights: PromiseOrValue<BigNumberish>[],
      _tobinTax: PromiseOrValue<BigNumberish>,
      _tobinTaxReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExchangeSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOtherReserveAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSpendingDay(overrides?: CallOverrides): Promise<BigNumber>;

    otherReserveAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeExchangeSpender(
      spender: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAssetAllocations(
      symbols: PromiseOrValue<BytesLike>[],
      weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDailySpendingRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFrozenGold(
      frozenGold: PromiseOrValue<BigNumberish>,
      frozenDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTobinTax(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTobinTaxReserveRatio(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTobinTaxStalenessThreshold(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spendingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTax(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTaxCache(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTaxReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    tobinTaxStalenessThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferExchangeGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addExchangeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetAllocationSymbols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetAllocationWeights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeSpenderAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frozenReserveGoldDays(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frozenReserveGoldStartBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    frozenReserveGoldStartDay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetAllocationSymbols(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetAllocationWeights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDailySpendingRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeSpenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrComputeTobinTax(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOtherReserveAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtherReserveAddressesGoldBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnfrozenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnfrozenReserveGoldBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      registryAddress: PromiseOrValue<string>,
      _tobinTaxStalenessThreshold: PromiseOrValue<BigNumberish>,
      _spendingRatio: PromiseOrValue<BigNumberish>,
      _frozenGold: PromiseOrValue<BigNumberish>,
      _frozenDays: PromiseOrValue<BigNumberish>,
      _assetAllocationSymbols: PromiseOrValue<BytesLike>[],
      _assetAllocationWeights: PromiseOrValue<BigNumberish>[],
      _tobinTax: PromiseOrValue<BigNumberish>,
      _tobinTaxReserveRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExchangeSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOtherReserveAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpender(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSpendingDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherReserveAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeExchangeSpender(
      spender: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOtherReserveAddress(
      reserveAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSpender(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAssetAllocations(
      symbols: PromiseOrValue<BytesLike>[],
      weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDailySpendingRatio(
      ratio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFrozenGold(
      frozenGold: PromiseOrValue<BigNumberish>,
      frozenDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTobinTax(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTobinTaxReserveRatio(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTobinTaxStalenessThreshold(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spendingLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tobinTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tobinTaxCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tobinTaxReserveRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tobinTaxStalenessThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferExchangeGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferGold(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
