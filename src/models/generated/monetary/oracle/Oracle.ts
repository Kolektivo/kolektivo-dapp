/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OracleInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addProvider(address)": FunctionFragment;
    "getData()": FunctionFragment;
    "isValid()": FunctionFragment;
    "minimumProviders()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "providerReports(address,uint256)": FunctionFragment;
    "providers(uint256)": FunctionFragment;
    "providersSize()": FunctionFragment;
    "purgeReports()": FunctionFragment;
    "purgeReportsFrom(address)": FunctionFragment;
    "pushReport(uint256)": FunctionFragment;
    "removeProvider(address)": FunctionFragment;
    "reportDelay()": FunctionFragment;
    "reportExpirationTime()": FunctionFragment;
    "setIsValid(bool)": FunctionFragment;
    "setMinimumProviders(uint256)": FunctionFragment;
    "setPendingOwner(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addProvider"
      | "getData"
      | "isValid"
      | "minimumProviders"
      | "owner"
      | "pendingOwner"
      | "providerReports"
      | "providers"
      | "providersSize"
      | "purgeReports"
      | "purgeReportsFrom"
      | "pushReport"
      | "removeProvider"
      | "reportDelay"
      | "reportExpirationTime"
      | "setIsValid"
      | "setMinimumProviders"
      | "setPendingOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(functionFragment: "isValid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumProviders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providerReports",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "providers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "providersSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purgeReports",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purgeReportsFrom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushReport",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportExpirationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsValid",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumProviders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providersSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purgeReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purgeReportsFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;

  events: {
    "MinimumProvidersChanged(uint256,uint256)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "OracleMarkedAsInvalid()": EventFragment;
    "OracleMarkedAsValid()": EventFragment;
    "ProviderAdded(address)": EventFragment;
    "ProviderRemoved(address)": EventFragment;
    "ProviderReportPushed(address,uint256,uint256)": EventFragment;
    "ProviderReportsPurged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MinimumProvidersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleMarkedAsInvalid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleMarkedAsValid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderReportPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderReportsPurged"): EventFragment;
}

export interface MinimumProvidersChangedEventObject {
  oldMinimumProviders: BigNumber;
  newMinimumProviders: BigNumber;
}
export type MinimumProvidersChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumProvidersChangedEventObject
>;

export type MinimumProvidersChangedEventFilter =
  TypedEventFilter<MinimumProvidersChangedEvent>;

export interface NewOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  previousPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface OracleMarkedAsInvalidEventObject {}
export type OracleMarkedAsInvalidEvent = TypedEvent<
  [],
  OracleMarkedAsInvalidEventObject
>;

export type OracleMarkedAsInvalidEventFilter =
  TypedEventFilter<OracleMarkedAsInvalidEvent>;

export interface OracleMarkedAsValidEventObject {}
export type OracleMarkedAsValidEvent = TypedEvent<
  [],
  OracleMarkedAsValidEventObject
>;

export type OracleMarkedAsValidEventFilter =
  TypedEventFilter<OracleMarkedAsValidEvent>;

export interface ProviderAddedEventObject {
  provider: string;
}
export type ProviderAddedEvent = TypedEvent<[string], ProviderAddedEventObject>;

export type ProviderAddedEventFilter = TypedEventFilter<ProviderAddedEvent>;

export interface ProviderRemovedEventObject {
  provider: string;
}
export type ProviderRemovedEvent = TypedEvent<
  [string],
  ProviderRemovedEventObject
>;

export type ProviderRemovedEventFilter = TypedEventFilter<ProviderRemovedEvent>;

export interface ProviderReportPushedEventObject {
  provider: string;
  payload: BigNumber;
  timestamp: BigNumber;
}
export type ProviderReportPushedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ProviderReportPushedEventObject
>;

export type ProviderReportPushedEventFilter =
  TypedEventFilter<ProviderReportPushedEvent>;

export interface ProviderReportsPurgedEventObject {
  purger: string;
  provider: string;
}
export type ProviderReportsPurgedEvent = TypedEvent<
  [string, string],
  ProviderReportsPurgedEventObject
>;

export type ProviderReportsPurgedEventFilter =
  TypedEventFilter<ProviderReportsPurgedEvent>;

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getData(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    isValid(overrides?: CallOverrides): Promise<[boolean]>;

    minimumProviders(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    providerReports(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; payload: BigNumber }
    >;

    providers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    providersSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    purgeReports(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purgeReportsFrom(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushReport(
      payload: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    reportExpirationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    setIsValid(
      isValid_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumProviders(
      minimumProviders_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getData(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

  isValid(overrides?: CallOverrides): Promise<boolean>;

  minimumProviders(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  providerReports(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { timestamp: BigNumber; payload: BigNumber }
  >;

  providers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  providersSize(overrides?: CallOverrides): Promise<BigNumber>;

  purgeReports(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purgeReportsFrom(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushReport(
    payload: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  reportExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

  setIsValid(
    isValid_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumProviders(
    minimumProviders_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingOwner(
    pendingOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addProvider(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getData(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    isValid(overrides?: CallOverrides): Promise<boolean>;

    minimumProviders(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    providerReports(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; payload: BigNumber }
    >;

    providers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    providersSize(overrides?: CallOverrides): Promise<BigNumber>;

    purgeReports(overrides?: CallOverrides): Promise<void>;

    purgeReportsFrom(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushReport(
      payload: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProvider(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    reportExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    setIsValid(
      isValid_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumProviders(
      minimumProviders_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MinimumProvidersChanged(uint256,uint256)"(
      oldMinimumProviders?: null,
      newMinimumProviders?: null
    ): MinimumProvidersChangedEventFilter;
    MinimumProvidersChanged(
      oldMinimumProviders?: null,
      newMinimumProviders?: null
    ): MinimumProvidersChangedEventFilter;

    "NewOwner(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;
    NewOwner(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "OracleMarkedAsInvalid()"(): OracleMarkedAsInvalidEventFilter;
    OracleMarkedAsInvalid(): OracleMarkedAsInvalidEventFilter;

    "OracleMarkedAsValid()"(): OracleMarkedAsValidEventFilter;
    OracleMarkedAsValid(): OracleMarkedAsValidEventFilter;

    "ProviderAdded(address)"(
      provider?: PromiseOrValue<string> | null
    ): ProviderAddedEventFilter;
    ProviderAdded(
      provider?: PromiseOrValue<string> | null
    ): ProviderAddedEventFilter;

    "ProviderRemoved(address)"(
      provider?: PromiseOrValue<string> | null
    ): ProviderRemovedEventFilter;
    ProviderRemoved(
      provider?: PromiseOrValue<string> | null
    ): ProviderRemovedEventFilter;

    "ProviderReportPushed(address,uint256,uint256)"(
      provider?: PromiseOrValue<string> | null,
      payload?: null,
      timestamp?: null
    ): ProviderReportPushedEventFilter;
    ProviderReportPushed(
      provider?: PromiseOrValue<string> | null,
      payload?: null,
      timestamp?: null
    ): ProviderReportPushedEventFilter;

    "ProviderReportsPurged(address,address)"(
      purger?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null
    ): ProviderReportsPurgedEventFilter;
    ProviderReportsPurged(
      purger?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null
    ): ProviderReportsPurgedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    isValid(overrides?: CallOverrides): Promise<BigNumber>;

    minimumProviders(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    providerReports(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providersSize(overrides?: CallOverrides): Promise<BigNumber>;

    purgeReports(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purgeReportsFrom(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushReport(
      payload: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    reportExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    setIsValid(
      isValid_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumProviders(
      minimumProviders_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providerReports(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providersSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purgeReports(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purgeReportsFrom(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushReport(
      payload: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportExpirationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsValid(
      isValid_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumProviders(
      minimumProviders_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
