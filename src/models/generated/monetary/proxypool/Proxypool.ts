/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IVault {
  export type BatchSwapStepStruct = {
    poolId: PromiseOrValue<BytesLike>;
    assetInIndex: PromiseOrValue<BigNumberish>;
    assetOutIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type BatchSwapStepStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    poolId: string;
    assetInIndex: BigNumber;
    assetOutIndex: BigNumber;
    amount: BigNumber;
    userData: string;
  };

  export type FundManagementStruct = {
    sender: PromiseOrValue<string>;
    fromInternalBalance: PromiseOrValue<boolean>;
    recipient: PromiseOrValue<string>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type FundManagementStructOutput = [
    string,
    boolean,
    string,
    boolean
  ] & {
    sender: string;
    fromInternalBalance: boolean;
    recipient: string;
    toInternalBalance: boolean;
  };
}

export interface ProxypoolInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "batchSwapExactIn((bytes32,uint256,uint256,uint256,bytes)[],address[],uint256,uint256,(address,bool,address,bool),int256[],uint256)": FunctionFragment;
    "batchSwapExactOut((bytes32,uint256,uint256,uint256,bytes)[],address[],uint256,(address,bool,address,bool),int256[],uint256)": FunctionFragment;
    "ceilingMultiplier()": FunctionFragment;
    "ceilingTradeShare()": FunctionFragment;
    "floorTradeShare()": FunctionFragment;
    "inBalanceAfter()": FunctionFragment;
    "inBalanceBefore()": FunctionFragment;
    "outBalanceAfter()": FunctionFragment;
    "outBalanceBefore()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairToken()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "reserve()": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "setPendingOwner(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "batchSwapExactIn"
      | "batchSwapExactOut"
      | "ceilingMultiplier"
      | "ceilingTradeShare"
      | "floorTradeShare"
      | "inBalanceAfter"
      | "inBalanceBefore"
      | "outBalanceAfter"
      | "outBalanceBefore"
      | "owner"
      | "pairToken"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "reserve"
      | "reserveToken"
      | "setPendingOwner"
      | "unpause"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [
      IVault.BatchSwapStepStruct[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IVault.FundManagementStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactOut",
    values: [
      IVault.BatchSwapStepStruct[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      IVault.FundManagementStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ceilingMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ceilingTradeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "floorTradeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inBalanceAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inBalanceBefore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outBalanceAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outBalanceBefore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ceilingMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ceilingTradeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floorTradeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inBalanceAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inBalanceBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outBalanceAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outBalanceBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface NewOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  previousPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Proxypool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxypoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactIn(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      totalAmountIn: PromiseOrValue<BigNumberish>,
      minTotalAmountOut: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactOut(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      maxTotalAmountIn: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ceilingMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    ceilingTradeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    floorTradeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    inBalanceAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    inBalanceBefore(overrides?: CallOverrides): Promise<[BigNumber]>;

    outBalanceAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    outBalanceBefore(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairToken(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    reserveToken(overrides?: CallOverrides): Promise<[string]>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactIn(
    swaps: IVault.BatchSwapStepStruct[],
    assets: PromiseOrValue<string>[],
    totalAmountIn: PromiseOrValue<BigNumberish>,
    minTotalAmountOut: PromiseOrValue<BigNumberish>,
    funds: IVault.FundManagementStruct,
    limits: PromiseOrValue<BigNumberish>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactOut(
    swaps: IVault.BatchSwapStepStruct[],
    assets: PromiseOrValue<string>[],
    maxTotalAmountIn: PromiseOrValue<BigNumberish>,
    funds: IVault.FundManagementStruct,
    limits: PromiseOrValue<BigNumberish>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ceilingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  ceilingTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

  floorTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

  inBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

  inBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

  outBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

  outBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairToken(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  reserve(overrides?: CallOverrides): Promise<string>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  setPendingOwner(
    pendingOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    batchSwapExactIn(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      totalAmountIn: PromiseOrValue<BigNumberish>,
      minTotalAmountOut: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSwapExactOut(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      maxTotalAmountIn: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ceilingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    ceilingTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

    floorTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

    inBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

    inBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

    outBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

    outBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairToken(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    reserve(overrides?: CallOverrides): Promise<string>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewOwner(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;
    NewOwner(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSwapExactIn(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      totalAmountIn: PromiseOrValue<BigNumberish>,
      minTotalAmountOut: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      maxTotalAmountIn: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ceilingMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    ceilingTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

    floorTradeShare(overrides?: CallOverrides): Promise<BigNumber>;

    inBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

    inBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

    outBalanceAfter(overrides?: CallOverrides): Promise<BigNumber>;

    outBalanceBefore(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairToken(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactIn(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      totalAmountIn: PromiseOrValue<BigNumberish>,
      minTotalAmountOut: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactOut(
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      maxTotalAmountIn: PromiseOrValue<BigNumberish>,
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ceilingMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ceilingTradeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floorTradeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inBalanceAfter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inBalanceBefore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outBalanceAfter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outBalanceBefore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
