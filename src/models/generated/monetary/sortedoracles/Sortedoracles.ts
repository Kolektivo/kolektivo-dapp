/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SortedoraclesInterface extends utils.Interface {
  functions: {
    "addOracle(address,address)": FunctionFragment;
    "breakerBox()": FunctionFragment;
    "getOracles(address)": FunctionFragment;
    "getRates(address)": FunctionFragment;
    "getTimestamps(address)": FunctionFragment;
    "getTokenReportExpirySeconds(address)": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "isOldestReportExpired(address)": FunctionFragment;
    "isOracle(address,address)": FunctionFragment;
    "medianRate(address)": FunctionFragment;
    "medianTimestamp(address)": FunctionFragment;
    "numRates(address)": FunctionFragment;
    "numTimestamps(address)": FunctionFragment;
    "oracles(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeExpiredReports(address,uint256)": FunctionFragment;
    "removeOracle(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "report(address,uint256,address,address)": FunctionFragment;
    "reportExpirySeconds()": FunctionFragment;
    "setBreakerBox(address)": FunctionFragment;
    "setReportExpiry(uint256)": FunctionFragment;
    "setTokenReportExpiry(address,uint256)": FunctionFragment;
    "tokenReportExpirySeconds(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOracle"
      | "breakerBox"
      | "getOracles"
      | "getRates"
      | "getTimestamps"
      | "getTokenReportExpirySeconds"
      | "getVersionNumber"
      | "initialize"
      | "isOldestReportExpired"
      | "isOracle"
      | "medianRate"
      | "medianTimestamp"
      | "numRates"
      | "numTimestamps"
      | "oracles"
      | "owner"
      | "removeExpiredReports"
      | "removeOracle"
      | "renounceOwnership"
      | "report"
      | "reportExpirySeconds"
      | "setBreakerBox"
      | "setReportExpiry"
      | "setTokenReportExpiry"
      | "tokenReportExpirySeconds"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "breakerBox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenReportExpirySeconds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOldestReportExpired",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "medianRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "medianTimestamp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numTimestamps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExpiredReports",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reportExpirySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBreakerBox",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportExpiry",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenReportExpiry",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenReportExpirySeconds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "breakerBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenReportExpirySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOldestReportExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "medianRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "medianTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExpiredReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportExpirySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreakerBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenReportExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenReportExpirySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BreakerBoxUpdated(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MedianUpdated(address,uint256)": EventFragment;
    "OracleAdded(address,address)": EventFragment;
    "OracleRemoved(address,address)": EventFragment;
    "OracleReportRemoved(address,address)": EventFragment;
    "OracleReported(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReportExpirySet(uint256)": EventFragment;
    "TokenReportExpirySet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BreakerBoxUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MedianUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleReportRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleReported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportExpirySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReportExpirySet"): EventFragment;
}

export interface BreakerBoxUpdatedEventObject {
  newBreakerBox: string;
}
export type BreakerBoxUpdatedEvent = TypedEvent<
  [string],
  BreakerBoxUpdatedEventObject
>;

export type BreakerBoxUpdatedEventFilter =
  TypedEventFilter<BreakerBoxUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MedianUpdatedEventObject {
  token: string;
  value: BigNumber;
}
export type MedianUpdatedEvent = TypedEvent<
  [string, BigNumber],
  MedianUpdatedEventObject
>;

export type MedianUpdatedEventFilter = TypedEventFilter<MedianUpdatedEvent>;

export interface OracleAddedEventObject {
  token: string;
  oracleAddress: string;
}
export type OracleAddedEvent = TypedEvent<
  [string, string],
  OracleAddedEventObject
>;

export type OracleAddedEventFilter = TypedEventFilter<OracleAddedEvent>;

export interface OracleRemovedEventObject {
  token: string;
  oracleAddress: string;
}
export type OracleRemovedEvent = TypedEvent<
  [string, string],
  OracleRemovedEventObject
>;

export type OracleRemovedEventFilter = TypedEventFilter<OracleRemovedEvent>;

export interface OracleReportRemovedEventObject {
  token: string;
  oracle: string;
}
export type OracleReportRemovedEvent = TypedEvent<
  [string, string],
  OracleReportRemovedEventObject
>;

export type OracleReportRemovedEventFilter =
  TypedEventFilter<OracleReportRemovedEvent>;

export interface OracleReportedEventObject {
  token: string;
  oracle: string;
  timestamp: BigNumber;
  value: BigNumber;
}
export type OracleReportedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  OracleReportedEventObject
>;

export type OracleReportedEventFilter = TypedEventFilter<OracleReportedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReportExpirySetEventObject {
  reportExpiry: BigNumber;
}
export type ReportExpirySetEvent = TypedEvent<
  [BigNumber],
  ReportExpirySetEventObject
>;

export type ReportExpirySetEventFilter = TypedEventFilter<ReportExpirySetEvent>;

export interface TokenReportExpirySetEventObject {
  token: string;
  reportExpiry: BigNumber;
}
export type TokenReportExpirySetEvent = TypedEvent<
  [string, BigNumber],
  TokenReportExpirySetEventObject
>;

export type TokenReportExpirySetEventFilter =
  TypedEventFilter<TokenReportExpirySetEvent>;

export interface Sortedoracles extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SortedoraclesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    breakerBox(overrides?: CallOverrides): Promise<[string]>;

    getOracles(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], number[]]>;

    getTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], number[]]>;

    getTokenReportExpirySeconds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOldestReportExpired(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isOracle(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    medianRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    medianTimestamp(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeExpiredReports(
      token: PromiseOrValue<string>,
      n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    report(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      lesserKey: PromiseOrValue<string>,
      greaterKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportExpirySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBreakerBox(
      newBreakerBox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReportExpiry(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenReportExpiry(
      _token: PromiseOrValue<string>,
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenReportExpirySeconds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addOracle(
    token: PromiseOrValue<string>,
    oracleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  breakerBox(overrides?: CallOverrides): Promise<string>;

  getOracles(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRates(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], number[]]>;

  getTimestamps(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], number[]]>;

  getTokenReportExpirySeconds(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize(
    _reportExpirySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOldestReportExpired(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  isOracle(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  medianRate(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  medianTimestamp(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numRates(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numTimestamps(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracles(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeExpiredReports(
    token: PromiseOrValue<string>,
    n: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOracle(
    token: PromiseOrValue<string>,
    oracleAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  report(
    token: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    lesserKey: PromiseOrValue<string>,
    greaterKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportExpirySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  setBreakerBox(
    newBreakerBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReportExpiry(
    _reportExpirySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenReportExpiry(
    _token: PromiseOrValue<string>,
    _reportExpirySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenReportExpirySeconds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    breakerBox(overrides?: CallOverrides): Promise<string>;

    getOracles(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], number[]]>;

    getTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], number[]]>;

    getTokenReportExpirySeconds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOldestReportExpired(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    isOracle(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    medianRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    medianTimestamp(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeExpiredReports(
      token: PromiseOrValue<string>,
      n: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    report(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      lesserKey: PromiseOrValue<string>,
      greaterKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reportExpirySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    setBreakerBox(
      newBreakerBox: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportExpiry(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenReportExpiry(
      _token: PromiseOrValue<string>,
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenReportExpirySeconds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BreakerBoxUpdated(address)"(
      newBreakerBox?: PromiseOrValue<string> | null
    ): BreakerBoxUpdatedEventFilter;
    BreakerBoxUpdated(
      newBreakerBox?: PromiseOrValue<string> | null
    ): BreakerBoxUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MedianUpdated(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      value?: null
    ): MedianUpdatedEventFilter;
    MedianUpdated(
      token?: PromiseOrValue<string> | null,
      value?: null
    ): MedianUpdatedEventFilter;

    "OracleAdded(address,address)"(
      token?: PromiseOrValue<string> | null,
      oracleAddress?: PromiseOrValue<string> | null
    ): OracleAddedEventFilter;
    OracleAdded(
      token?: PromiseOrValue<string> | null,
      oracleAddress?: PromiseOrValue<string> | null
    ): OracleAddedEventFilter;

    "OracleRemoved(address,address)"(
      token?: PromiseOrValue<string> | null,
      oracleAddress?: PromiseOrValue<string> | null
    ): OracleRemovedEventFilter;
    OracleRemoved(
      token?: PromiseOrValue<string> | null,
      oracleAddress?: PromiseOrValue<string> | null
    ): OracleRemovedEventFilter;

    "OracleReportRemoved(address,address)"(
      token?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null
    ): OracleReportRemovedEventFilter;
    OracleReportRemoved(
      token?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null
    ): OracleReportRemovedEventFilter;

    "OracleReported(address,address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      timestamp?: null,
      value?: null
    ): OracleReportedEventFilter;
    OracleReported(
      token?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      timestamp?: null,
      value?: null
    ): OracleReportedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReportExpirySet(uint256)"(reportExpiry?: null): ReportExpirySetEventFilter;
    ReportExpirySet(reportExpiry?: null): ReportExpirySetEventFilter;

    "TokenReportExpirySet(address,uint256)"(
      token?: null,
      reportExpiry?: null
    ): TokenReportExpirySetEventFilter;
    TokenReportExpirySet(
      token?: null,
      reportExpiry?: null
    ): TokenReportExpirySetEventFilter;
  };

  estimateGas: {
    addOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    breakerBox(overrides?: CallOverrides): Promise<BigNumber>;

    getOracles(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenReportExpirySeconds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOldestReportExpired(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    medianRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    medianTimestamp(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeExpiredReports(
      token: PromiseOrValue<string>,
      n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    report(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      lesserKey: PromiseOrValue<string>,
      greaterKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportExpirySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    setBreakerBox(
      newBreakerBox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReportExpiry(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenReportExpiry(
      _token: PromiseOrValue<string>,
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenReportExpirySeconds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    breakerBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracles(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenReportExpirySeconds(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOldestReportExpired(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    medianRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    medianTimestamp(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numRates(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTimestamps(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeExpiredReports(
      token: PromiseOrValue<string>,
      n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOracle(
      token: PromiseOrValue<string>,
      oracleAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    report(
      token: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      lesserKey: PromiseOrValue<string>,
      greaterKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportExpirySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBreakerBox(
      newBreakerBox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReportExpiry(
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenReportExpiry(
      _token: PromiseOrValue<string>,
      _reportExpirySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenReportExpirySeconds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
