/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Treasury {
  export type ERC721IdStruct = {
    erc721: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
  };

  export type ERC721IdStructOutput = [string, BigNumber] & {
    erc721: string;
    id: BigNumber;
  };
}

export interface TreasuryInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EIP712_DOMAIN()": FunctionFragment;
    "EIP712_REVISION()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "allRegisteredERC20s()": FunctionFragment;
    "allRegisteredERC721Ids()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetTypeOfERC20(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bondERC20(address,uint256)": FunctionFragment;
    "bondERC721Id(address,uint256)": FunctionFragment;
    "bondingLimitPerERC20(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delistERC20AsBondable(address)": FunctionFragment;
    "delistERC20AsRedeemable(address,uint256)": FunctionFragment;
    "delistERC20AsRedeemable(address)": FunctionFragment;
    "delistERC721IdAsBondable(address,uint256)": FunctionFragment;
    "executeTx(address,bytes)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isERC20Bondable(address)": FunctionFragment;
    "isERC20Redeemable(address)": FunctionFragment;
    "isERC721IdBondable(address,uint256)": FunctionFragment;
    "isERC721IdRedeemable(address,uint256)": FunctionFragment;
    "listERC20AsBondable(address)": FunctionFragment;
    "listERC20AsRedeemable(address)": FunctionFragment;
    "listERC721IdAsBondable(address,uint256)": FunctionFragment;
    "listERC721IdAsRedeemable(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "oraclePerERC20(address)": FunctionFragment;
    "oraclePerERC721Id(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rebase()": FunctionFragment;
    "redeemERC20(address,uint256)": FunctionFragment;
    "redeemERC721Id(address,uint256)": FunctionFragment;
    "redeemLimitPerERC20(address)": FunctionFragment;
    "registerERC20(address,address,uint8)": FunctionFragment;
    "registerERC721Id(address,uint256,address)": FunctionFragment;
    "registeredERC20s(uint256)": FunctionFragment;
    "registeredERC721Ids(uint256)": FunctionFragment;
    "scaledBalanceOf(address)": FunctionFragment;
    "scaledTotalSupply()": FunctionFragment;
    "setERC20BondingLimit(address,uint256)": FunctionFragment;
    "setERC20RedeemLimit(address,uint256)": FunctionFragment;
    "setPendingOwner(address)": FunctionFragment;
    "setupAndListERC20Bond(address,uint256)": FunctionFragment;
    "setupAndListERC20Redemption(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalValuation()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAll(address)": FunctionFragment;
    "transferAllFrom(address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unregisterERC20(address)": FunctionFragment;
    "unregisterERC721Id(address,uint256)": FunctionFragment;
    "updateERC20Oracle(address,address)": FunctionFragment;
    "updateERC721IdOracle(address,uint256,address)": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
    "withdrawERC721Id(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "EIP712_DOMAIN"
      | "EIP712_REVISION"
      | "PERMIT_TYPEHASH"
      | "acceptOwnership"
      | "allRegisteredERC20s"
      | "allRegisteredERC721Ids"
      | "allowance"
      | "approve"
      | "assetTypeOfERC20"
      | "balanceOf"
      | "bondERC20"
      | "bondERC721Id"
      | "bondingLimitPerERC20"
      | "decimals"
      | "decreaseAllowance"
      | "delistERC20AsBondable"
      | "delistERC20AsRedeemable(address,uint256)"
      | "delistERC20AsRedeemable(address)"
      | "delistERC721IdAsBondable"
      | "executeTx"
      | "increaseAllowance"
      | "isERC20Bondable"
      | "isERC20Redeemable"
      | "isERC721IdBondable"
      | "isERC721IdRedeemable"
      | "listERC20AsBondable"
      | "listERC20AsRedeemable"
      | "listERC721IdAsBondable"
      | "listERC721IdAsRedeemable"
      | "name"
      | "nonces"
      | "onERC721Received"
      | "oraclePerERC20"
      | "oraclePerERC721Id"
      | "owner"
      | "pendingOwner"
      | "permit"
      | "rebase"
      | "redeemERC20"
      | "redeemERC721Id"
      | "redeemLimitPerERC20"
      | "registerERC20"
      | "registerERC721Id"
      | "registeredERC20s"
      | "registeredERC721Ids"
      | "scaledBalanceOf"
      | "scaledTotalSupply"
      | "setERC20BondingLimit"
      | "setERC20RedeemLimit"
      | "setPendingOwner"
      | "setupAndListERC20Bond"
      | "setupAndListERC20Redemption"
      | "symbol"
      | "totalSupply"
      | "totalValuation"
      | "transfer"
      | "transferAll"
      | "transferAllFrom"
      | "transferFrom"
      | "unregisterERC20"
      | "unregisterERC721Id"
      | "updateERC20Oracle"
      | "updateERC721IdOracle"
      | "withdrawERC20"
      | "withdrawERC721Id"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allRegisteredERC20s",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allRegisteredERC721Ids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeOfERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC721Id",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingLimitPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC20AsBondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC20AsRedeemable(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC20AsRedeemable(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC721IdAsBondable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTx",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Bondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Redeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC721IdBondable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC721IdRedeemable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC20AsBondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC20AsRedeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC721IdAsBondable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC721IdAsRedeemable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePerERC721Id",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC721Id",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLimitPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerERC721Id",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC20s",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC721Ids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20BondingLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20RedeemLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAndListERC20Bond",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAndListERC20Redemption",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterERC721Id",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateERC20Oracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateERC721IdOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721Id",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allRegisteredERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allRegisteredERC721Ids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeOfERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingLimitPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC20AsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC20AsRedeemable(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC20AsRedeemable(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC721IdAsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Bondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Redeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC721IdBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC721IdRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC20AsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC20AsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC721IdAsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC721IdAsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLimitPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC721Ids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20BondingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20RedeemLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupAndListERC20Bond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupAndListERC20Redemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateERC20Oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateERC721IdOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721Id",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ERC20DelistedAsBondable(address)": EventFragment;
    "ERC20DelistedAsRedeemable(address)": EventFragment;
    "ERC20ListedAsBondable(address)": EventFragment;
    "ERC20ListedAsRedeemable(address)": EventFragment;
    "ERC20OracleUpdated(address,address,address)": EventFragment;
    "ERC20PriceUpdated(address,address,uint256,uint256)": EventFragment;
    "ERC20Registered(address,address,uint8)": EventFragment;
    "ERC20Unregistered(address)": EventFragment;
    "ERC20Withdrawn(address,address,uint256)": EventFragment;
    "ERC20sBonded(address,address,uint256)": EventFragment;
    "ERC20sRedeemed(address,address,uint256)": EventFragment;
    "ERC721IdDelistedAsBondable(address,uint256)": EventFragment;
    "ERC721IdDelistedAsRedeemable(address,uint256)": EventFragment;
    "ERC721IdListedAsBondable(address,uint256)": EventFragment;
    "ERC721IdListedAsRedeemable(address,uint256)": EventFragment;
    "ERC721IdOracleUpdated(address,uint256,address,address)": EventFragment;
    "ERC721IdPriceUpdated(address,uint256,address,uint256,uint256)": EventFragment;
    "ERC721IdRegistered(address,uint256,address)": EventFragment;
    "ERC721IdUnregistered(address,uint256)": EventFragment;
    "ERC721IdWithdrawn(address,uint256,address)": EventFragment;
    "ERC721IdsBonded(address,address,uint256,uint256)": EventFragment;
    "ERC721IdsRedeemed(address,address,uint256,uint256)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "Rebase(uint256,uint256)": EventFragment;
    "SetERC20BondingLimit(address,uint256,uint256)": EventFragment;
    "SetERC20RedeemLimit(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DelistedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DelistedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20ListedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20ListedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Unregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20sBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20sRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdDelistedAsBondable"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC721IdDelistedAsRedeemable"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdListedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdListedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdsBonded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdsRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20BondingLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20RedeemLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ERC20DelistedAsBondableEventObject {
  erc20: string;
}
export type ERC20DelistedAsBondableEvent = TypedEvent<
  [string],
  ERC20DelistedAsBondableEventObject
>;

export type ERC20DelistedAsBondableEventFilter =
  TypedEventFilter<ERC20DelistedAsBondableEvent>;

export interface ERC20DelistedAsRedeemableEventObject {
  erc20: string;
}
export type ERC20DelistedAsRedeemableEvent = TypedEvent<
  [string],
  ERC20DelistedAsRedeemableEventObject
>;

export type ERC20DelistedAsRedeemableEventFilter =
  TypedEventFilter<ERC20DelistedAsRedeemableEvent>;

export interface ERC20ListedAsBondableEventObject {
  erc20: string;
}
export type ERC20ListedAsBondableEvent = TypedEvent<
  [string],
  ERC20ListedAsBondableEventObject
>;

export type ERC20ListedAsBondableEventFilter =
  TypedEventFilter<ERC20ListedAsBondableEvent>;

export interface ERC20ListedAsRedeemableEventObject {
  erc20: string;
}
export type ERC20ListedAsRedeemableEvent = TypedEvent<
  [string],
  ERC20ListedAsRedeemableEventObject
>;

export type ERC20ListedAsRedeemableEventFilter =
  TypedEventFilter<ERC20ListedAsRedeemableEvent>;

export interface ERC20OracleUpdatedEventObject {
  erc20: string;
  oldOracle: string;
  newOracle: string;
}
export type ERC20OracleUpdatedEvent = TypedEvent<
  [string, string, string],
  ERC20OracleUpdatedEventObject
>;

export type ERC20OracleUpdatedEventFilter =
  TypedEventFilter<ERC20OracleUpdatedEvent>;

export interface ERC20PriceUpdatedEventObject {
  erc20: string;
  oracle: string;
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type ERC20PriceUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ERC20PriceUpdatedEventObject
>;

export type ERC20PriceUpdatedEventFilter =
  TypedEventFilter<ERC20PriceUpdatedEvent>;

export interface ERC20RegisteredEventObject {
  erc20: string;
  oracle: string;
  assetType: number;
}
export type ERC20RegisteredEvent = TypedEvent<
  [string, string, number],
  ERC20RegisteredEventObject
>;

export type ERC20RegisteredEventFilter = TypedEventFilter<ERC20RegisteredEvent>;

export interface ERC20UnregisteredEventObject {
  erc20: string;
}
export type ERC20UnregisteredEvent = TypedEvent<
  [string],
  ERC20UnregisteredEventObject
>;

export type ERC20UnregisteredEventFilter =
  TypedEventFilter<ERC20UnregisteredEvent>;

export interface ERC20WithdrawnEventObject {
  erc20: string;
  recipient: string;
  erc20sWithdrawn: BigNumber;
}
export type ERC20WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20WithdrawnEventObject
>;

export type ERC20WithdrawnEventFilter = TypedEventFilter<ERC20WithdrawnEvent>;

export interface ERC20sBondedEventObject {
  who: string;
  erc20: string;
  kttsMinted: BigNumber;
}
export type ERC20sBondedEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20sBondedEventObject
>;

export type ERC20sBondedEventFilter = TypedEventFilter<ERC20sBondedEvent>;

export interface ERC20sRedeemedEventObject {
  who: string;
  erc20: string;
  kttsBurned: BigNumber;
}
export type ERC20sRedeemedEvent = TypedEvent<
  [string, string, BigNumber],
  ERC20sRedeemedEventObject
>;

export type ERC20sRedeemedEventFilter = TypedEventFilter<ERC20sRedeemedEvent>;

export interface ERC721IdDelistedAsBondableEventObject {
  erc721: string;
  id: BigNumber;
}
export type ERC721IdDelistedAsBondableEvent = TypedEvent<
  [string, BigNumber],
  ERC721IdDelistedAsBondableEventObject
>;

export type ERC721IdDelistedAsBondableEventFilter =
  TypedEventFilter<ERC721IdDelistedAsBondableEvent>;

export interface ERC721IdDelistedAsRedeemableEventObject {
  erc721: string;
  id: BigNumber;
}
export type ERC721IdDelistedAsRedeemableEvent = TypedEvent<
  [string, BigNumber],
  ERC721IdDelistedAsRedeemableEventObject
>;

export type ERC721IdDelistedAsRedeemableEventFilter =
  TypedEventFilter<ERC721IdDelistedAsRedeemableEvent>;

export interface ERC721IdListedAsBondableEventObject {
  erc721: string;
  id: BigNumber;
}
export type ERC721IdListedAsBondableEvent = TypedEvent<
  [string, BigNumber],
  ERC721IdListedAsBondableEventObject
>;

export type ERC721IdListedAsBondableEventFilter =
  TypedEventFilter<ERC721IdListedAsBondableEvent>;

export interface ERC721IdListedAsRedeemableEventObject {
  erc721: string;
  id: BigNumber;
}
export type ERC721IdListedAsRedeemableEvent = TypedEvent<
  [string, BigNumber],
  ERC721IdListedAsRedeemableEventObject
>;

export type ERC721IdListedAsRedeemableEventFilter =
  TypedEventFilter<ERC721IdListedAsRedeemableEvent>;

export interface ERC721IdOracleUpdatedEventObject {
  erc721: string;
  id: BigNumber;
  oldOracle: string;
  newOracle: string;
}
export type ERC721IdOracleUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  ERC721IdOracleUpdatedEventObject
>;

export type ERC721IdOracleUpdatedEventFilter =
  TypedEventFilter<ERC721IdOracleUpdatedEvent>;

export interface ERC721IdPriceUpdatedEventObject {
  erc721: string;
  id: BigNumber;
  oracle: string;
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type ERC721IdPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  ERC721IdPriceUpdatedEventObject
>;

export type ERC721IdPriceUpdatedEventFilter =
  TypedEventFilter<ERC721IdPriceUpdatedEvent>;

export interface ERC721IdRegisteredEventObject {
  erc721: string;
  id: BigNumber;
  oracle: string;
}
export type ERC721IdRegisteredEvent = TypedEvent<
  [string, BigNumber, string],
  ERC721IdRegisteredEventObject
>;

export type ERC721IdRegisteredEventFilter =
  TypedEventFilter<ERC721IdRegisteredEvent>;

export interface ERC721IdUnregisteredEventObject {
  erc721: string;
  id: BigNumber;
}
export type ERC721IdUnregisteredEvent = TypedEvent<
  [string, BigNumber],
  ERC721IdUnregisteredEventObject
>;

export type ERC721IdUnregisteredEventFilter =
  TypedEventFilter<ERC721IdUnregisteredEvent>;

export interface ERC721IdWithdrawnEventObject {
  erc721: string;
  id: BigNumber;
  recipient: string;
}
export type ERC721IdWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  ERC721IdWithdrawnEventObject
>;

export type ERC721IdWithdrawnEventFilter =
  TypedEventFilter<ERC721IdWithdrawnEvent>;

export interface ERC721IdsBondedEventObject {
  who: string;
  erc721: string;
  id: BigNumber;
  kttsMinted: BigNumber;
}
export type ERC721IdsBondedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ERC721IdsBondedEventObject
>;

export type ERC721IdsBondedEventFilter = TypedEventFilter<ERC721IdsBondedEvent>;

export interface ERC721IdsRedeemedEventObject {
  who: string;
  erc721: string;
  id: BigNumber;
  kttsBurned: BigNumber;
}
export type ERC721IdsRedeemedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ERC721IdsRedeemedEventObject
>;

export type ERC721IdsRedeemedEventFilter =
  TypedEventFilter<ERC721IdsRedeemedEvent>;

export interface NewOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  previousPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface RebaseEventObject {
  epoch: BigNumber;
  newScalar: BigNumber;
}
export type RebaseEvent = TypedEvent<[BigNumber, BigNumber], RebaseEventObject>;

export type RebaseEventFilter = TypedEventFilter<RebaseEvent>;

export interface SetERC20BondingLimitEventObject {
  erc20: string;
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type SetERC20BondingLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20BondingLimitEventObject
>;

export type SetERC20BondingLimitEventFilter =
  TypedEventFilter<SetERC20BondingLimitEvent>;

export interface SetERC20RedeemLimitEventObject {
  erc20: string;
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type SetERC20RedeemLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20RedeemLimitEventObject
>;

export type SetERC20RedeemLimitEventFilter =
  TypedEventFilter<SetERC20RedeemLimitEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<[string]>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allRegisteredERC20s(overrides?: CallOverrides): Promise<[string[]]>;

    allRegisteredERC721Ids(
      overrides?: CallOverrides
    ): Promise<[Treasury.ERC721IdStructOutput[]]>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetTypeOfERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "delistERC20AsRedeemable(address,uint256)"(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "delistERC20AsRedeemable(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC721IdBondable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC721IdAsRedeemable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      kttWad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupAndListERC20Bond(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupAndListERC20Redemption(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValuation(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAll(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAllFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateERC20Oracle(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateERC721IdOracle(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

  EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allRegisteredERC20s(overrides?: CallOverrides): Promise<string[]>;

  allRegisteredERC721Ids(
    overrides?: CallOverrides
  ): Promise<Treasury.ERC721IdStructOutput[]>;

  allowance(
    owner_: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetTypeOfERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  balanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondERC20(
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC721Id(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondingLimitPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistERC20AsBondable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "delistERC20AsRedeemable(address,uint256)"(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "delistERC20AsRedeemable(address)"(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistERC721IdAsBondable(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTx(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isERC20Bondable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC20Redeemable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC721IdBondable(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC721IdRedeemable(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listERC20AsBondable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC20AsRedeemable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC721IdAsBondable(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC721IdAsRedeemable(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  oraclePerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  oraclePerERC721Id(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20(
    erc20: PromiseOrValue<string>,
    kttWad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC721Id(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemLimitPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerERC20(
    erc20: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    assetType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerERC721Id(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredERC20s(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registeredERC721Ids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

  scaledBalanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setERC20BondingLimit(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC20RedeemLimit(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingOwner(
    pendingOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupAndListERC20Bond(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupAndListERC20Redemption(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalValuation(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAll(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAllFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterERC20(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterERC721Id(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateERC20Oracle(
    erc20: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateERC721IdOracle(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    erc20: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721Id(
    erc721: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<string>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    allRegisteredERC20s(overrides?: CallOverrides): Promise<string[]>;

    allRegisteredERC721Ids(
      overrides?: CallOverrides
    ): Promise<Treasury.ERC721IdStructOutput[]>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetTypeOfERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "delistERC20AsRedeemable(address,uint256)"(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "delistERC20AsRedeemable(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delistERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC721IdBondable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC721IdAsRedeemable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebase(overrides?: CallOverrides): Promise<void>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      kttWad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAndListERC20Bond(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAndListERC20Redemption(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalValuation(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAll(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAllFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateERC20Oracle(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateERC721IdOracle(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ERC20DelistedAsBondable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsBondableEventFilter;
    ERC20DelistedAsBondable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsBondableEventFilter;

    "ERC20DelistedAsRedeemable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsRedeemableEventFilter;
    ERC20DelistedAsRedeemable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsRedeemableEventFilter;

    "ERC20ListedAsBondable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsBondableEventFilter;
    ERC20ListedAsBondable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsBondableEventFilter;

    "ERC20ListedAsRedeemable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsRedeemableEventFilter;
    ERC20ListedAsRedeemable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsRedeemableEventFilter;

    "ERC20OracleUpdated(address,address,address)"(
      erc20?: PromiseOrValue<string> | null,
      oldOracle?: null,
      newOracle?: null
    ): ERC20OracleUpdatedEventFilter;
    ERC20OracleUpdated(
      erc20?: PromiseOrValue<string> | null,
      oldOracle?: null,
      newOracle?: null
    ): ERC20OracleUpdatedEventFilter;

    "ERC20PriceUpdated(address,address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      oldPrice?: null,
      newPrice?: null
    ): ERC20PriceUpdatedEventFilter;
    ERC20PriceUpdated(
      erc20?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      oldPrice?: null,
      newPrice?: null
    ): ERC20PriceUpdatedEventFilter;

    "ERC20Registered(address,address,uint8)"(
      erc20?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      assetType?: null
    ): ERC20RegisteredEventFilter;
    ERC20Registered(
      erc20?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      assetType?: null
    ): ERC20RegisteredEventFilter;

    "ERC20Unregistered(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20UnregisteredEventFilter;
    ERC20Unregistered(
      erc20?: PromiseOrValue<string> | null
    ): ERC20UnregisteredEventFilter;

    "ERC20Withdrawn(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      erc20sWithdrawn?: null
    ): ERC20WithdrawnEventFilter;
    ERC20Withdrawn(
      erc20?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      erc20sWithdrawn?: null
    ): ERC20WithdrawnEventFilter;

    "ERC20sBonded(address,address,uint256)"(
      who?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      kttsMinted?: null
    ): ERC20sBondedEventFilter;
    ERC20sBonded(
      who?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      kttsMinted?: null
    ): ERC20sBondedEventFilter;

    "ERC20sRedeemed(address,address,uint256)"(
      who?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      kttsBurned?: null
    ): ERC20sRedeemedEventFilter;
    ERC20sRedeemed(
      who?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      kttsBurned?: null
    ): ERC20sRedeemedEventFilter;

    "ERC721IdDelistedAsBondable(address,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdDelistedAsBondableEventFilter;
    ERC721IdDelistedAsBondable(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdDelistedAsBondableEventFilter;

    "ERC721IdDelistedAsRedeemable(address,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdDelistedAsRedeemableEventFilter;
    ERC721IdDelistedAsRedeemable(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdDelistedAsRedeemableEventFilter;

    "ERC721IdListedAsBondable(address,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdListedAsBondableEventFilter;
    ERC721IdListedAsBondable(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdListedAsBondableEventFilter;

    "ERC721IdListedAsRedeemable(address,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdListedAsRedeemableEventFilter;
    ERC721IdListedAsRedeemable(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdListedAsRedeemableEventFilter;

    "ERC721IdOracleUpdated(address,uint256,address,address)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oldOracle?: null,
      newOracle?: null
    ): ERC721IdOracleUpdatedEventFilter;
    ERC721IdOracleUpdated(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oldOracle?: null,
      newOracle?: null
    ): ERC721IdOracleUpdatedEventFilter;

    "ERC721IdPriceUpdated(address,uint256,address,uint256,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
      oldPrice?: null,
      newPrice?: null
    ): ERC721IdPriceUpdatedEventFilter;
    ERC721IdPriceUpdated(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
      oldPrice?: null,
      newPrice?: null
    ): ERC721IdPriceUpdatedEventFilter;

    "ERC721IdRegistered(address,uint256,address)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null
    ): ERC721IdRegisteredEventFilter;
    ERC721IdRegistered(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null
    ): ERC721IdRegisteredEventFilter;

    "ERC721IdUnregistered(address,uint256)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdUnregisteredEventFilter;
    ERC721IdUnregistered(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ERC721IdUnregisteredEventFilter;

    "ERC721IdWithdrawn(address,uint256,address)"(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null
    ): ERC721IdWithdrawnEventFilter;
    ERC721IdWithdrawn(
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null
    ): ERC721IdWithdrawnEventFilter;

    "ERC721IdsBonded(address,address,uint256,uint256)"(
      who?: PromiseOrValue<string> | null,
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      kttsMinted?: null
    ): ERC721IdsBondedEventFilter;
    ERC721IdsBonded(
      who?: PromiseOrValue<string> | null,
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      kttsMinted?: null
    ): ERC721IdsBondedEventFilter;

    "ERC721IdsRedeemed(address,address,uint256,uint256)"(
      who?: PromiseOrValue<string> | null,
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      kttsBurned?: null
    ): ERC721IdsRedeemedEventFilter;
    ERC721IdsRedeemed(
      who?: PromiseOrValue<string> | null,
      erc721?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      kttsBurned?: null
    ): ERC721IdsRedeemedEventFilter;

    "NewOwner(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;
    NewOwner(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "Rebase(uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      newScalar?: null
    ): RebaseEventFilter;
    Rebase(
      epoch?: PromiseOrValue<BigNumberish> | null,
      newScalar?: null
    ): RebaseEventFilter;

    "SetERC20BondingLimit(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20BondingLimitEventFilter;
    SetERC20BondingLimit(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20BondingLimitEventFilter;

    "SetERC20RedeemLimit(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20RedeemLimitEventFilter;
    SetERC20RedeemLimit(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20RedeemLimitEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allRegisteredERC20s(overrides?: CallOverrides): Promise<BigNumber>;

    allRegisteredERC721Ids(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetTypeOfERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "delistERC20AsRedeemable(address,uint256)"(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "delistERC20AsRedeemable(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC721IdBondable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC721IdAsRedeemable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      kttWad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupAndListERC20Bond(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupAndListERC20Redemption(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalValuation(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAll(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAllFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateERC20Oracle(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateERC721IdOracle(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allRegisteredERC20s(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allRegisteredERC721Ids(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetTypeOfERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "delistERC20AsRedeemable(address,uint256)"(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "delistERC20AsRedeemable(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC721IdBondable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC721IdAsBondable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC721IdAsRedeemable(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      kttWad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupAndListERC20Bond(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupAndListERC20Redemption(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValuation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAll(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAllFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateERC20Oracle(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateERC721IdOracle(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721Id(
      erc721: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
