/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IReserve {
  export type ERC721IdStruct = {
    erc721: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
  };

  export type ERC721IdStructOutput = [string, BigNumber] & {
    erc721: string;
    id: BigNumber;
  };
}

export interface ReserveInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "bondERC20(address,uint256)": FunctionFragment;
    "bondERC20All(address)": FunctionFragment;
    "bondERC20AllFrom(address,address)": FunctionFragment;
    "bondERC20AllFromTo(address,address,address)": FunctionFragment;
    "bondERC20AllTo(address,address)": FunctionFragment;
    "bondERC20From(address,address,uint256)": FunctionFragment;
    "bondERC20FromTo(address,address,address,uint256)": FunctionFragment;
    "bondERC20To(address,address,uint256)": FunctionFragment;
    "bondERC721Id((address,uint256))": FunctionFragment;
    "bondERC721IdFrom((address,uint256),address)": FunctionFragment;
    "bondERC721IdFromTo((address,uint256),address,address)": FunctionFragment;
    "bondERC721IdTo((address,uint256),address)": FunctionFragment;
    "bondingDiscountPerERC20(address)": FunctionFragment;
    "bondingDiscountPerERC721Id(bytes32)": FunctionFragment;
    "bondingLimitPerERC20(address)": FunctionFragment;
    "bondingVestingDurationPerERC20(address)": FunctionFragment;
    "bondingVestingDurationPerERC721Id(bytes32)": FunctionFragment;
    "delistERC20AsBondable(address)": FunctionFragment;
    "delistERC20AsRedeemable(address)": FunctionFragment;
    "delistERC721IdAsBondable((address,uint256))": FunctionFragment;
    "delistERC721IdAsRedeemable((address,uint256))": FunctionFragment;
    "deregisterERC20(address)": FunctionFragment;
    "deregisterERC721Id((address,uint256))": FunctionFragment;
    "executeTx(address,bytes)": FunctionFragment;
    "hashOfERC721Id((address,uint256))": FunctionFragment;
    "incurDebt(uint256)": FunctionFragment;
    "isERC20Bondable(address)": FunctionFragment;
    "isERC20Redeemable(address)": FunctionFragment;
    "isERC721IdBondable(bytes32)": FunctionFragment;
    "isERC721IdRedeemable(bytes32)": FunctionFragment;
    "listERC20AsBondable(address)": FunctionFragment;
    "listERC20AsRedeemable(address)": FunctionFragment;
    "listERC721IdAsBondable((address,uint256))": FunctionFragment;
    "listERC721IdAsRedeemable((address,uint256))": FunctionFragment;
    "minBacking()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "oraclePerERC20(address)": FunctionFragment;
    "oraclePerERC721Id(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "payDebt(uint256)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "redeemERC20(address,uint256)": FunctionFragment;
    "redeemERC20All(address)": FunctionFragment;
    "redeemERC20AllFrom(address,address)": FunctionFragment;
    "redeemERC20AllFromTo(address,address,address)": FunctionFragment;
    "redeemERC20AllTo(address,address)": FunctionFragment;
    "redeemERC20From(address,address,uint256)": FunctionFragment;
    "redeemERC20FromTo(address,address,address,uint256)": FunctionFragment;
    "redeemERC20To(address,address,uint256)": FunctionFragment;
    "redeemERC721Id((address,uint256))": FunctionFragment;
    "redeemERC721IdFrom((address,uint256),address)": FunctionFragment;
    "redeemERC721IdFromTo((address,uint256),address,address)": FunctionFragment;
    "redeemERC721IdTo((address,uint256),address)": FunctionFragment;
    "redeemLimitPerERC20(address)": FunctionFragment;
    "registerERC20(address,address)": FunctionFragment;
    "registerERC721Id((address,uint256),address)": FunctionFragment;
    "registeredERC20s(uint256)": FunctionFragment;
    "registeredERC20sSize()": FunctionFragment;
    "registeredERC721Ids(uint256)": FunctionFragment;
    "registeredERC721IdsSize()": FunctionFragment;
    "reserveStatus()": FunctionFragment;
    "setBondingDiscountForERC20(address,uint256)": FunctionFragment;
    "setBondingDiscountForERC721Id((address,uint256),uint256)": FunctionFragment;
    "setBondingVestingForERC20(address,uint256)": FunctionFragment;
    "setBondingVestingForERC721Id((address,uint256),uint256)": FunctionFragment;
    "setERC20BondingLimit(address,uint256)": FunctionFragment;
    "setERC20RedeemLimit(address,uint256)": FunctionFragment;
    "setMinBacking(uint256)": FunctionFragment;
    "setPendingOwner(address)": FunctionFragment;
    "setTokenOracle(address)": FunctionFragment;
    "setVestingVault(address)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenOracle()": FunctionFragment;
    "updateOracleForERC20(address,address)": FunctionFragment;
    "updateOracleForERC721Id((address,uint256),address)": FunctionFragment;
    "vestingVault()": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
    "withdrawERC721Id((address,uint256),address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "bondERC20"
      | "bondERC20All"
      | "bondERC20AllFrom"
      | "bondERC20AllFromTo"
      | "bondERC20AllTo"
      | "bondERC20From"
      | "bondERC20FromTo"
      | "bondERC20To"
      | "bondERC721Id"
      | "bondERC721IdFrom"
      | "bondERC721IdFromTo"
      | "bondERC721IdTo"
      | "bondingDiscountPerERC20"
      | "bondingDiscountPerERC721Id"
      | "bondingLimitPerERC20"
      | "bondingVestingDurationPerERC20"
      | "bondingVestingDurationPerERC721Id"
      | "delistERC20AsBondable"
      | "delistERC20AsRedeemable"
      | "delistERC721IdAsBondable"
      | "delistERC721IdAsRedeemable"
      | "deregisterERC20"
      | "deregisterERC721Id"
      | "executeTx"
      | "hashOfERC721Id"
      | "incurDebt"
      | "isERC20Bondable"
      | "isERC20Redeemable"
      | "isERC721IdBondable"
      | "isERC721IdRedeemable"
      | "listERC20AsBondable"
      | "listERC20AsRedeemable"
      | "listERC721IdAsBondable"
      | "listERC721IdAsRedeemable"
      | "minBacking"
      | "onERC721Received"
      | "oraclePerERC20"
      | "oraclePerERC721Id"
      | "owner"
      | "payDebt"
      | "pendingOwner"
      | "redeemERC20"
      | "redeemERC20All"
      | "redeemERC20AllFrom"
      | "redeemERC20AllFromTo"
      | "redeemERC20AllTo"
      | "redeemERC20From"
      | "redeemERC20FromTo"
      | "redeemERC20To"
      | "redeemERC721Id"
      | "redeemERC721IdFrom"
      | "redeemERC721IdFromTo"
      | "redeemERC721IdTo"
      | "redeemLimitPerERC20"
      | "registerERC20"
      | "registerERC721Id"
      | "registeredERC20s"
      | "registeredERC20sSize"
      | "registeredERC721Ids"
      | "registeredERC721IdsSize"
      | "reserveStatus"
      | "setBondingDiscountForERC20"
      | "setBondingDiscountForERC721Id"
      | "setBondingVestingForERC20"
      | "setBondingVestingForERC721Id"
      | "setERC20BondingLimit"
      | "setERC20RedeemLimit"
      | "setMinBacking"
      | "setPendingOwner"
      | "setTokenOracle"
      | "setVestingVault"
      | "token"
      | "tokenOracle"
      | "updateOracleForERC20"
      | "updateOracleForERC721Id"
      | "vestingVault"
      | "withdrawERC20"
      | "withdrawERC721Id"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20All",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20AllFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20AllFromTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20AllTo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20From",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20FromTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC20To",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC721Id",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC721IdFrom",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC721IdFromTo",
    values: [
      IReserve.ERC721IdStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondERC721IdTo",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingDiscountPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingDiscountPerERC721Id",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingLimitPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingVestingDurationPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingVestingDurationPerERC721Id",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC20AsBondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC20AsRedeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC721IdAsBondable",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC721IdAsRedeemable",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterERC721Id",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTx",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOfERC721Id",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "incurDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Bondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC20Redeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC721IdBondable",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC721IdRedeemable",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC20AsBondable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC20AsRedeemable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC721IdAsBondable",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC721IdAsRedeemable",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "minBacking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePerERC721Id",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20All",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20AllFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20AllFromTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20AllTo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20From",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20FromTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC20To",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC721Id",
    values: [IReserve.ERC721IdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC721IdFrom",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC721IdFromTo",
    values: [
      IReserve.ERC721IdStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemERC721IdTo",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLimitPerERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerERC721Id",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC20s",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC20sSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC721Ids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredERC721IdsSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingDiscountForERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingDiscountForERC721Id",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingVestingForERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingVestingForERC721Id",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20BondingLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20RedeemLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBacking",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleForERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleForERC721Id",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721Id",
    values: [IReserve.ERC721IdStruct, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20All",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20AllFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20AllFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20AllTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20From",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20FromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC721IdFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC721IdFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondERC721IdTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingDiscountPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingDiscountPerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingLimitPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingVestingDurationPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingVestingDurationPerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC20AsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC20AsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC721IdAsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC721IdAsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOfERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incurDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Bondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC20Redeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC721IdBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC721IdRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC20AsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC20AsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC721IdAsBondable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC721IdAsRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minBacking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20All",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20AllFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20AllFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20AllTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20From",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20FromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC721IdFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC721IdFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemERC721IdTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLimitPerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC20s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC20sSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC721Ids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredERC721IdsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingDiscountForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingDiscountForERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingVestingForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingVestingForERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20BondingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20RedeemLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleForERC721Id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721Id",
    data: BytesLike
  ): Result;

  events: {
    "BackingUpdated(uint256,uint256)": EventFragment;
    "BondedERC20(address,uint256,uint256)": EventFragment;
    "BondedERC721(tuple,uint256)": EventFragment;
    "DebtIncurred(uint256)": EventFragment;
    "DebtPayed(uint256)": EventFragment;
    "ERC20DelistedAsBondable(address)": EventFragment;
    "ERC20DelistedAsRedeemable(address)": EventFragment;
    "ERC20Deregistered(address)": EventFragment;
    "ERC20ListedAsBondable(address)": EventFragment;
    "ERC20ListedAsRedeemable(address)": EventFragment;
    "ERC20Registered(address)": EventFragment;
    "ERC721IdDelistedAsBondable(tuple)": EventFragment;
    "ERC721IdDelistedAsRedeemable(tuple)": EventFragment;
    "ERC721IdDeregistered(tuple)": EventFragment;
    "ERC721IdListedAsBondable(tuple)": EventFragment;
    "ERC721IdListedAsRedeemable(tuple)": EventFragment;
    "ERC721IdRegistered(tuple)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "RedeemedERC20(address,uint256,uint256)": EventFragment;
    "RedeemedERC721Id(tuple,uint256)": EventFragment;
    "SetERC20BondingDiscount(address,uint256,uint256)": EventFragment;
    "SetERC20BondingLimit(address,uint256,uint256)": EventFragment;
    "SetERC20BondingVesting(address,uint256,uint256)": EventFragment;
    "SetERC20Oracle(address,address,address)": EventFragment;
    "SetERC20RedeemLimit(address,uint256,uint256)": EventFragment;
    "SetERC721IdBondingDiscount(tuple,uint256,uint256)": EventFragment;
    "SetERC721IdBondingVesting(tuple,uint256,uint256)": EventFragment;
    "SetERC721IdOracle(tuple,address,address)": EventFragment;
    "SetMinBacking(uint256,uint256)": EventFragment;
    "SetTokenOracle(address,address)": EventFragment;
    "SetVestingVault(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BackingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondedERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtIncurred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtPayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DelistedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20DelistedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Deregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20ListedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20ListedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdDelistedAsBondable"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC721IdDelistedAsRedeemable"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdListedAsBondable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdListedAsRedeemable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721IdRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedERC721Id"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20BondingDiscount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20BondingLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20BondingVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20Oracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC20RedeemLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC721IdBondingDiscount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC721IdBondingVesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetERC721IdOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinBacking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVestingVault"): EventFragment;
}

export interface BackingUpdatedEventObject {
  oldBacking: BigNumber;
  newBacking: BigNumber;
}
export type BackingUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BackingUpdatedEventObject
>;

export type BackingUpdatedEventFilter = TypedEventFilter<BackingUpdatedEvent>;

export interface BondedERC20EventObject {
  erc20: string;
  erc20sBonded: BigNumber;
  tokensMinted: BigNumber;
}
export type BondedERC20Event = TypedEvent<
  [string, BigNumber, BigNumber],
  BondedERC20EventObject
>;

export type BondedERC20EventFilter = TypedEventFilter<BondedERC20Event>;

export interface BondedERC721EventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
  tokensMinted: BigNumber;
}
export type BondedERC721Event = TypedEvent<
  [IReserve.ERC721IdStructOutput, BigNumber],
  BondedERC721EventObject
>;

export type BondedERC721EventFilter = TypedEventFilter<BondedERC721Event>;

export interface DebtIncurredEventObject {
  tokenAmount: BigNumber;
}
export type DebtIncurredEvent = TypedEvent<
  [BigNumber],
  DebtIncurredEventObject
>;

export type DebtIncurredEventFilter = TypedEventFilter<DebtIncurredEvent>;

export interface DebtPayedEventObject {
  tokenAmount: BigNumber;
}
export type DebtPayedEvent = TypedEvent<[BigNumber], DebtPayedEventObject>;

export type DebtPayedEventFilter = TypedEventFilter<DebtPayedEvent>;

export interface ERC20DelistedAsBondableEventObject {
  erc20: string;
}
export type ERC20DelistedAsBondableEvent = TypedEvent<
  [string],
  ERC20DelistedAsBondableEventObject
>;

export type ERC20DelistedAsBondableEventFilter =
  TypedEventFilter<ERC20DelistedAsBondableEvent>;

export interface ERC20DelistedAsRedeemableEventObject {
  erc20: string;
}
export type ERC20DelistedAsRedeemableEvent = TypedEvent<
  [string],
  ERC20DelistedAsRedeemableEventObject
>;

export type ERC20DelistedAsRedeemableEventFilter =
  TypedEventFilter<ERC20DelistedAsRedeemableEvent>;

export interface ERC20DeregisteredEventObject {
  erc20: string;
}
export type ERC20DeregisteredEvent = TypedEvent<
  [string],
  ERC20DeregisteredEventObject
>;

export type ERC20DeregisteredEventFilter =
  TypedEventFilter<ERC20DeregisteredEvent>;

export interface ERC20ListedAsBondableEventObject {
  erc20: string;
}
export type ERC20ListedAsBondableEvent = TypedEvent<
  [string],
  ERC20ListedAsBondableEventObject
>;

export type ERC20ListedAsBondableEventFilter =
  TypedEventFilter<ERC20ListedAsBondableEvent>;

export interface ERC20ListedAsRedeemableEventObject {
  erc20: string;
}
export type ERC20ListedAsRedeemableEvent = TypedEvent<
  [string],
  ERC20ListedAsRedeemableEventObject
>;

export type ERC20ListedAsRedeemableEventFilter =
  TypedEventFilter<ERC20ListedAsRedeemableEvent>;

export interface ERC20RegisteredEventObject {
  erc20: string;
}
export type ERC20RegisteredEvent = TypedEvent<
  [string],
  ERC20RegisteredEventObject
>;

export type ERC20RegisteredEventFilter = TypedEventFilter<ERC20RegisteredEvent>;

export interface ERC721IdDelistedAsBondableEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdDelistedAsBondableEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdDelistedAsBondableEventObject
>;

export type ERC721IdDelistedAsBondableEventFilter =
  TypedEventFilter<ERC721IdDelistedAsBondableEvent>;

export interface ERC721IdDelistedAsRedeemableEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdDelistedAsRedeemableEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdDelistedAsRedeemableEventObject
>;

export type ERC721IdDelistedAsRedeemableEventFilter =
  TypedEventFilter<ERC721IdDelistedAsRedeemableEvent>;

export interface ERC721IdDeregisteredEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdDeregisteredEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdDeregisteredEventObject
>;

export type ERC721IdDeregisteredEventFilter =
  TypedEventFilter<ERC721IdDeregisteredEvent>;

export interface ERC721IdListedAsBondableEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdListedAsBondableEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdListedAsBondableEventObject
>;

export type ERC721IdListedAsBondableEventFilter =
  TypedEventFilter<ERC721IdListedAsBondableEvent>;

export interface ERC721IdListedAsRedeemableEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdListedAsRedeemableEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdListedAsRedeemableEventObject
>;

export type ERC721IdListedAsRedeemableEventFilter =
  TypedEventFilter<ERC721IdListedAsRedeemableEvent>;

export interface ERC721IdRegisteredEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
}
export type ERC721IdRegisteredEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput],
  ERC721IdRegisteredEventObject
>;

export type ERC721IdRegisteredEventFilter =
  TypedEventFilter<ERC721IdRegisteredEvent>;

export interface NewOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  previousPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface RedeemedERC20EventObject {
  erc20: string;
  erc20sRedeemed: BigNumber;
  tokensBurned: BigNumber;
}
export type RedeemedERC20Event = TypedEvent<
  [string, BigNumber, BigNumber],
  RedeemedERC20EventObject
>;

export type RedeemedERC20EventFilter = TypedEventFilter<RedeemedERC20Event>;

export interface RedeemedERC721IdEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
  tokensBurned: BigNumber;
}
export type RedeemedERC721IdEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput, BigNumber],
  RedeemedERC721IdEventObject
>;

export type RedeemedERC721IdEventFilter =
  TypedEventFilter<RedeemedERC721IdEvent>;

export interface SetERC20BondingDiscountEventObject {
  erc20: string;
  oldDiscount: BigNumber;
  newDiscount: BigNumber;
}
export type SetERC20BondingDiscountEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20BondingDiscountEventObject
>;

export type SetERC20BondingDiscountEventFilter =
  TypedEventFilter<SetERC20BondingDiscountEvent>;

export interface SetERC20BondingLimitEventObject {
  erc20: string;
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type SetERC20BondingLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20BondingLimitEventObject
>;

export type SetERC20BondingLimitEventFilter =
  TypedEventFilter<SetERC20BondingLimitEvent>;

export interface SetERC20BondingVestingEventObject {
  erc20: string;
  oldVestingDuration: BigNumber;
  newVestingDuration: BigNumber;
}
export type SetERC20BondingVestingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20BondingVestingEventObject
>;

export type SetERC20BondingVestingEventFilter =
  TypedEventFilter<SetERC20BondingVestingEvent>;

export interface SetERC20OracleEventObject {
  erc20: string;
  oldOracle: string;
  newOracle: string;
}
export type SetERC20OracleEvent = TypedEvent<
  [string, string, string],
  SetERC20OracleEventObject
>;

export type SetERC20OracleEventFilter = TypedEventFilter<SetERC20OracleEvent>;

export interface SetERC20RedeemLimitEventObject {
  erc20: string;
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type SetERC20RedeemLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetERC20RedeemLimitEventObject
>;

export type SetERC20RedeemLimitEventFilter =
  TypedEventFilter<SetERC20RedeemLimitEvent>;

export interface SetERC721IdBondingDiscountEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
  oldDiscount: BigNumber;
  newDiscount: BigNumber;
}
export type SetERC721IdBondingDiscountEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput, BigNumber, BigNumber],
  SetERC721IdBondingDiscountEventObject
>;

export type SetERC721IdBondingDiscountEventFilter =
  TypedEventFilter<SetERC721IdBondingDiscountEvent>;

export interface SetERC721IdBondingVestingEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
  oldVestingDuration: BigNumber;
  newVestingDuration: BigNumber;
}
export type SetERC721IdBondingVestingEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput, BigNumber, BigNumber],
  SetERC721IdBondingVestingEventObject
>;

export type SetERC721IdBondingVestingEventFilter =
  TypedEventFilter<SetERC721IdBondingVestingEvent>;

export interface SetERC721IdOracleEventObject {
  erc721Id: IReserve.ERC721IdStructOutput;
  oldOracle: string;
  newOracle: string;
}
export type SetERC721IdOracleEvent = TypedEvent<
  [IReserve.ERC721IdStructOutput, string, string],
  SetERC721IdOracleEventObject
>;

export type SetERC721IdOracleEventFilter =
  TypedEventFilter<SetERC721IdOracleEvent>;

export interface SetMinBackingEventObject {
  oldMinBacking: BigNumber;
  newMinBacking: BigNumber;
}
export type SetMinBackingEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMinBackingEventObject
>;

export type SetMinBackingEventFilter = TypedEventFilter<SetMinBackingEvent>;

export interface SetTokenOracleEventObject {
  oldOracle: string;
  newOracle: string;
}
export type SetTokenOracleEvent = TypedEvent<
  [string, string],
  SetTokenOracleEventObject
>;

export type SetTokenOracleEventFilter = TypedEventFilter<SetTokenOracleEvent>;

export interface SetVestingVaultEventObject {
  oldVestingVault: string;
  newVestingVault: string;
}
export type SetVestingVaultEvent = TypedEvent<
  [string, string],
  SetVestingVaultEventObject
>;

export type SetVestingVaultEventFilter = TypedEventFilter<SetVestingVaultEvent>;

export interface Reserve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReserveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondingDiscountPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingDiscountPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingVestingDurationPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingVestingDurationPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delistERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deregisterERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashOfERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incurDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC721IdBondable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minBacking(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registeredERC20sSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

    registeredERC721IdsSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveStatus(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    setBondingDiscountForERC20(
      erc20: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBondingDiscountForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBondingVestingForERC20(
      erc20: PromiseOrValue<string>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBondingVestingForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBacking(
      minBacking_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenOracle(
      tokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingVault(
      vestingVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenOracle(overrides?: CallOverrides): Promise<[string]>;

    updateOracleForERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOracleForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingVault(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20(
    erc20: PromiseOrValue<string>,
    erc20Amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20All(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20AllFrom(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20AllFromTo(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20AllTo(
    erc20: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20From(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    erc20Amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20FromTo(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    erc20Amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC20To(
    erc20: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    erc20Amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC721IdFrom(
    erc721Id: IReserve.ERC721IdStruct,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC721IdFromTo(
    erc721Id: IReserve.ERC721IdStruct,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondERC721IdTo(
    erc721Id: IReserve.ERC721IdStruct,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondingDiscountPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingDiscountPerERC721Id(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingLimitPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingVestingDurationPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingVestingDurationPerERC721Id(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delistERC20AsBondable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistERC20AsRedeemable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistERC721IdAsBondable(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delistERC721IdAsRedeemable(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deregisterERC20(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deregisterERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTx(
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashOfERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  incurDebt(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isERC20Bondable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC20Redeemable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC721IdBondable(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC721IdRedeemable(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listERC20AsBondable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC20AsRedeemable(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC721IdAsBondable(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listERC721IdAsRedeemable(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minBacking(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  oraclePerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  oraclePerERC721Id(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  payDebt(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  redeemERC20(
    erc20: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20All(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20AllFrom(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20AllFromTo(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20AllTo(
    erc20: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20From(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20FromTo(
    erc20: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC20To(
    erc20: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC721IdFrom(
    erc721Id: IReserve.ERC721IdStruct,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC721IdFromTo(
    erc721Id: IReserve.ERC721IdStruct,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemERC721IdTo(
    erc721Id: IReserve.ERC721IdStruct,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemLimitPerERC20(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerERC20(
    erc20: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredERC20s(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registeredERC20sSize(overrides?: CallOverrides): Promise<BigNumber>;

  registeredERC721Ids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

  registeredERC721IdsSize(overrides?: CallOverrides): Promise<BigNumber>;

  reserveStatus(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  setBondingDiscountForERC20(
    erc20: PromiseOrValue<string>,
    discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBondingDiscountForERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBondingVestingForERC20(
    erc20: PromiseOrValue<string>,
    vestingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBondingVestingForERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    vestingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC20BondingLimit(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC20RedeemLimit(
    erc20: PromiseOrValue<string>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBacking(
    minBacking_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingOwner(
    pendingOwner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenOracle(
    tokenOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingVault(
    vestingVault_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenOracle(overrides?: CallOverrides): Promise<string>;

  updateOracleForERC20(
    erc20: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOracleForERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingVault(overrides?: CallOverrides): Promise<string>;

  withdrawERC20(
    erc20: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721Id(
    erc721Id: IReserve.ERC721IdStruct,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondingDiscountPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingDiscountPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingVestingDurationPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingVestingDurationPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delistERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delistERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    delistERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deregisterERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hashOfERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    incurDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC721IdBondable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    listERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    minBacking(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registeredERC20sSize(overrides?: CallOverrides): Promise<BigNumber>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { erc721: string; id: BigNumber }>;

    registeredERC721IdsSize(overrides?: CallOverrides): Promise<BigNumber>;

    reserveStatus(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    setBondingDiscountForERC20(
      erc20: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingDiscountForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingVestingForERC20(
      erc20: PromiseOrValue<string>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingVestingForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBacking(
      minBacking_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenOracle(
      tokenOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingVault(
      vestingVault_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenOracle(overrides?: CallOverrides): Promise<string>;

    updateOracleForERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOracleForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingVault(overrides?: CallOverrides): Promise<string>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BackingUpdated(uint256,uint256)"(
      oldBacking?: null,
      newBacking?: null
    ): BackingUpdatedEventFilter;
    BackingUpdated(
      oldBacking?: null,
      newBacking?: null
    ): BackingUpdatedEventFilter;

    "BondedERC20(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      erc20sBonded?: null,
      tokensMinted?: null
    ): BondedERC20EventFilter;
    BondedERC20(
      erc20?: PromiseOrValue<string> | null,
      erc20sBonded?: null,
      tokensMinted?: null
    ): BondedERC20EventFilter;

    "BondedERC721(tuple,uint256)"(
      erc721Id?: null,
      tokensMinted?: null
    ): BondedERC721EventFilter;
    BondedERC721(erc721Id?: null, tokensMinted?: null): BondedERC721EventFilter;

    "DebtIncurred(uint256)"(tokenAmount?: null): DebtIncurredEventFilter;
    DebtIncurred(tokenAmount?: null): DebtIncurredEventFilter;

    "DebtPayed(uint256)"(tokenAmount?: null): DebtPayedEventFilter;
    DebtPayed(tokenAmount?: null): DebtPayedEventFilter;

    "ERC20DelistedAsBondable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsBondableEventFilter;
    ERC20DelistedAsBondable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsBondableEventFilter;

    "ERC20DelistedAsRedeemable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsRedeemableEventFilter;
    ERC20DelistedAsRedeemable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DelistedAsRedeemableEventFilter;

    "ERC20Deregistered(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DeregisteredEventFilter;
    ERC20Deregistered(
      erc20?: PromiseOrValue<string> | null
    ): ERC20DeregisteredEventFilter;

    "ERC20ListedAsBondable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsBondableEventFilter;
    ERC20ListedAsBondable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsBondableEventFilter;

    "ERC20ListedAsRedeemable(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsRedeemableEventFilter;
    ERC20ListedAsRedeemable(
      erc20?: PromiseOrValue<string> | null
    ): ERC20ListedAsRedeemableEventFilter;

    "ERC20Registered(address)"(
      erc20?: PromiseOrValue<string> | null
    ): ERC20RegisteredEventFilter;
    ERC20Registered(
      erc20?: PromiseOrValue<string> | null
    ): ERC20RegisteredEventFilter;

    "ERC721IdDelistedAsBondable(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDelistedAsBondableEventFilter;
    ERC721IdDelistedAsBondable(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDelistedAsBondableEventFilter;

    "ERC721IdDelistedAsRedeemable(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDelistedAsRedeemableEventFilter;
    ERC721IdDelistedAsRedeemable(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDelistedAsRedeemableEventFilter;

    "ERC721IdDeregistered(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDeregisteredEventFilter;
    ERC721IdDeregistered(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdDeregisteredEventFilter;

    "ERC721IdListedAsBondable(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdListedAsBondableEventFilter;
    ERC721IdListedAsBondable(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdListedAsBondableEventFilter;

    "ERC721IdListedAsRedeemable(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdListedAsRedeemableEventFilter;
    ERC721IdListedAsRedeemable(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdListedAsRedeemableEventFilter;

    "ERC721IdRegistered(tuple)"(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdRegisteredEventFilter;
    ERC721IdRegistered(
      erc721Id?: IReserve.ERC721IdStruct | null
    ): ERC721IdRegisteredEventFilter;

    "NewOwner(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;
    NewOwner(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      previousPendingOwner?: PromiseOrValue<string> | null,
      newPendingOwner?: PromiseOrValue<string> | null
    ): NewPendingOwnerEventFilter;

    "RedeemedERC20(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      erc20sRedeemed?: null,
      tokensBurned?: null
    ): RedeemedERC20EventFilter;
    RedeemedERC20(
      erc20?: PromiseOrValue<string> | null,
      erc20sRedeemed?: null,
      tokensBurned?: null
    ): RedeemedERC20EventFilter;

    "RedeemedERC721Id(tuple,uint256)"(
      erc721Id?: null,
      tokensBurned?: null
    ): RedeemedERC721IdEventFilter;
    RedeemedERC721Id(
      erc721Id?: null,
      tokensBurned?: null
    ): RedeemedERC721IdEventFilter;

    "SetERC20BondingDiscount(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldDiscount?: null,
      newDiscount?: null
    ): SetERC20BondingDiscountEventFilter;
    SetERC20BondingDiscount(
      erc20?: PromiseOrValue<string> | null,
      oldDiscount?: null,
      newDiscount?: null
    ): SetERC20BondingDiscountEventFilter;

    "SetERC20BondingLimit(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20BondingLimitEventFilter;
    SetERC20BondingLimit(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20BondingLimitEventFilter;

    "SetERC20BondingVesting(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldVestingDuration?: null,
      newVestingDuration?: null
    ): SetERC20BondingVestingEventFilter;
    SetERC20BondingVesting(
      erc20?: PromiseOrValue<string> | null,
      oldVestingDuration?: null,
      newVestingDuration?: null
    ): SetERC20BondingVestingEventFilter;

    "SetERC20Oracle(address,address,address)"(
      erc20?: PromiseOrValue<string> | null,
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetERC20OracleEventFilter;
    SetERC20Oracle(
      erc20?: PromiseOrValue<string> | null,
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetERC20OracleEventFilter;

    "SetERC20RedeemLimit(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20RedeemLimitEventFilter;
    SetERC20RedeemLimit(
      erc20?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null
    ): SetERC20RedeemLimitEventFilter;

    "SetERC721IdBondingDiscount(tuple,uint256,uint256)"(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldDiscount?: null,
      newDiscount?: null
    ): SetERC721IdBondingDiscountEventFilter;
    SetERC721IdBondingDiscount(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldDiscount?: null,
      newDiscount?: null
    ): SetERC721IdBondingDiscountEventFilter;

    "SetERC721IdBondingVesting(tuple,uint256,uint256)"(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldVestingDuration?: null,
      newVestingDuration?: null
    ): SetERC721IdBondingVestingEventFilter;
    SetERC721IdBondingVesting(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldVestingDuration?: null,
      newVestingDuration?: null
    ): SetERC721IdBondingVestingEventFilter;

    "SetERC721IdOracle(tuple,address,address)"(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetERC721IdOracleEventFilter;
    SetERC721IdOracle(
      erc721Id?: IReserve.ERC721IdStruct | null,
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetERC721IdOracleEventFilter;

    "SetMinBacking(uint256,uint256)"(
      oldMinBacking?: null,
      newMinBacking?: null
    ): SetMinBackingEventFilter;
    SetMinBacking(
      oldMinBacking?: null,
      newMinBacking?: null
    ): SetMinBackingEventFilter;

    "SetTokenOracle(address,address)"(
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetTokenOracleEventFilter;
    SetTokenOracle(
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): SetTokenOracleEventFilter;

    "SetVestingVault(address,address)"(
      oldVestingVault?: PromiseOrValue<string> | null,
      newVestingVault?: PromiseOrValue<string> | null
    ): SetVestingVaultEventFilter;
    SetVestingVault(
      oldVestingVault?: PromiseOrValue<string> | null,
      newVestingVault?: PromiseOrValue<string> | null
    ): SetVestingVaultEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondingDiscountPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingDiscountPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingVestingDurationPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingVestingDurationPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delistERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deregisterERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashOfERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incurDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC721IdBondable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minBacking(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registeredERC20sSize(overrides?: CallOverrides): Promise<BigNumber>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registeredERC721IdsSize(overrides?: CallOverrides): Promise<BigNumber>;

    reserveStatus(overrides?: CallOverrides): Promise<BigNumber>;

    setBondingDiscountForERC20(
      erc20: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBondingDiscountForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBondingVestingForERC20(
      erc20: PromiseOrValue<string>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBondingVestingForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBacking(
      minBacking_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenOracle(
      tokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingVault(
      vestingVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOracle(overrides?: CallOverrides): Promise<BigNumber>;

    updateOracleForERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOracleForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingVault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20(
      erc20: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      erc20Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondingDiscountPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingDiscountPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingVestingDurationPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingVestingDurationPerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delistERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deregisterERC20(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deregisterERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTx(
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashOfERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incurDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isERC20Bondable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC20Redeemable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC721IdBondable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC721IdRedeemable(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listERC20AsBondable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC20AsRedeemable(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC721IdAsBondable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listERC721IdAsRedeemable(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minBacking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oraclePerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oraclePerERC721Id(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payDebt(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemERC20(
      erc20: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20All(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20AllFrom(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20AllFromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20AllTo(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20From(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20FromTo(
      erc20: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC20To(
      erc20: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC721IdFrom(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC721IdFromTo(
      erc721Id: IReserve.ERC721IdStruct,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemERC721IdTo(
      erc721Id: IReserve.ERC721IdStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemLimitPerERC20(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredERC20s(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredERC20sSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredERC721Ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredERC721IdsSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBondingDiscountForERC20(
      erc20: PromiseOrValue<string>,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBondingDiscountForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBondingVestingForERC20(
      erc20: PromiseOrValue<string>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBondingVestingForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC20BondingLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC20RedeemLimit(
      erc20: PromiseOrValue<string>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBacking(
      minBacking_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenOracle(
      tokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingVault(
      vestingVault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOracleForERC20(
      erc20: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOracleForERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      erc20: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721Id(
      erc721Id: IReserve.ERC721IdStruct,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
